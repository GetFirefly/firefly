use std::sync::Arc;

use liblumen_binary::BinaryEntrySpecifier;
use liblumen_diagnostics::*;
use liblumen_intern::{symbols, Symbol, Ident};
use liblumen_number::{Integer, Float};
use liblumen_syntax_base::{FunctionName, BinaryOp, UnaryOp, Deprecation, DeprecatedFlag};

use crate::ParserError;
use crate::ast::*;
use crate::lexer::{Token, DelayedSubstitution};
use crate::parser::binary::specifier_from_parsed;

grammar<'a>(reporter: &Reporter, codemap: &Arc<CodeMap>);

// The following are _not_ non-terminals, but macros
// which can be identified by the generic type parameter,
//
// Currently all of the macros expect the name of the corresponding
// non-terminal to have a type of the same name, a macro can
// be written to handle differing non-terminal/type combinations by
// adding a second type parameter used only in the type signature

// Semicolon-delimited with at least one element
Semi<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

// Comma-delimited with at least one element
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

// Comma-delimited with zero or more elements
CommaOpt<T>: Vec<T> = {
    <vals:(<T> ",")*> <last: T?> => {
        let mut vals = vals;
        vals.extend(last);
        vals
    },
};

// Dash-delimited with at least one element
Dash<T>: Vec<T> = {
    <v:(<T> "-")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

pub Module: Module = {
    <l:@L> "COMMENT"* "-" "module" "(" <name:atom>  ")" "." "COMMENT"* <body:ModuleBody?> <r:@R> => {
        let body = match body {
            None => Vec::new(),
            Some(body) => body,
        };
        Module::new_with_forms(reporter, codemap.clone(), span!(l, r), name, body)
    }
};

ModuleBody: Vec<TopLevel> = TopLevel+;

TopLevel: TopLevel = {
    <FunctionDefinition>
        => TopLevel::Function(<>),
    <RecordDeclaration>
        => TopLevel::Record(<>),
    <AttributeDefinition>
        => TopLevel::Attribute(<>),
};

// Top-level Functions

FunctionDefinition: Function = {
    <l:@L> <clauses:Semi<FunctionHead>> "." <r:@R>
        =>? Function::new(reporter, span!(l, r), clauses).map_err(|e| e.into())
};

FunctionHead: (Option<Name>, Clause) = {
    <l:@L> <a:atom> "(" <patterns:CommaOpt<Pattern>> ")" <guards:Guards?> "->" <body:Comma<Expr>> <r:@R> => {
        (Some(Name::Atom(a)), Clause::new(span!(l, r), patterns, guards.unwrap_or_default(), body, false))
    }
};

FunctionClause: (Option<Name>, Clause) = {
    <l:@L> <a:Ident?> "(" <patterns:CommaOpt<Pattern>> ")" <guards:Guards?> "->" <body:Comma<Expr>> <r:@R> => {
        (a.map(Name::Var), Clause::new(span!(l, r), patterns, guards.unwrap_or_default(), body, false))
    }
};

Guards: Vec<Guard> = "when" <BaseGuards>;
BaseGuards: Vec<Guard> = <Semi<Guard>>;

Guard: Guard = <l:@L> <conditions:Comma<Expr>> <r:@R>
    => Guard { span: span!(l, r), conditions };


FunctionName: Span<FunctionName> = {
    <l:@L> <function:atom> "/" <arity:arity> <r:@R> => {
        Span::new(span!(l, r), FunctionName::new_local(function.name, arity))
    }
};

// Attributes

AttributeDefinition: Attribute = {
    <l:@L> "-" "vsn" "(" <vsn:Atomic> ")" "." <r:@R>
        => Attribute::Vsn(span!(l, r), vsn),
    <l:@L> "-" "author" "(" <author:Atomic> ")" "." <r:@R>
        => Attribute::Author(span!(l, r), author),
    <l:@L> "-" "compile" "(" <opts:Constant> ")" "." <r:@R>
        => Attribute::Compile(span!(l, r), opts),
    <l:@L> "-" "import" "(" <module:atom> "," "[" <imports:CommaOpt<FunctionName>> "]" ")" "." <r:@R>
        => Attribute::Import(span!(l, r), module, imports),
    <l:@L> "-" "export" "(" "[" <exports:CommaOpt<FunctionName>> "]" ")" "." <r:@R>
        => Attribute::Export(span!(l, r), exports),
    <l:@L> "-" "export_type" "(" "[" <exports:CommaOpt<FunctionName>> "]" ")" "." <r:@R>
        => Attribute::ExportType(span!(l, r), exports),
    <l:@L> "-" "behaviour" "(" <module:atom> ")" "." <r:@R>
        => Attribute::Behaviour(span!(l, r), module),
    <l:@L> "-" "on_load" "(" <fun:FunctionName> ")" "." <r:@R>
        => Attribute::OnLoad(span!(l, r), fun),
    <l:@L> "-" "nifs" "(" "[" <exports:CommaOpt<FunctionName>> "]" ")" "." <r:@R>
        => Attribute::Nifs(span!(l, r), exports),
    TypeAttribute,
    TypeSpecAttribute,
    CallbackAttribute,
    DeprecatedAttribute,
    RemovedAttribute,
    UserAttribute,
};

RecordDeclaration: Record = {
    <l:@L> "-" "record" "(" <name:atom> "," <fields:TypedRecordFields> ")" "." <r:@R>
        => Record { span: span!(l, r), name, fields },
};

RemovedAttribute: Attribute = {
    <l:@L> "-" "removed" "(" "[" <rs:CommaOpt<Removed>> "]" ")" "." <r:@R>
        => Attribute::Removed(span!(l, r), rs),
};

Removed: (Span<FunctionName>, Ident) = {
    <l:@L> "{" <function:atom> "," <arity:arity> "," <descr:StringLiteral> "}" <r:@R> => {
        let span = span!(l, r);
        let f = Span::new(span, FunctionName::new_local(function.name, arity));

        (f, descr)
    },
};

TypeAttribute: Attribute = {
    <l:@L> "-" "type" <def:TypeDef> <r:@R> => {
        let mut def = def;
        def.span = span!(l, r);
        Attribute::Type(def)
    },
    <l:@L> "-" "opaque" <def:TypeDef> <r:@R> => {
        let mut def = def;
        def.span = span!(l, r);
        def.opaque = true;
        Attribute::Type(def)
    },
};

TypeSpecAttribute: Attribute = {
    <l:@L> "-" "spec" <spec:TypeSpec> <r:@R> => {
        let mut spec = spec;
        spec.span = span!(l, r);
        Attribute::Spec(spec)
    }
};

CallbackAttribute: Attribute = {
    <l:@L> "-" "callback" <spec:TypeSpec> <r:@R> => {
        let callback = Callback {
            span: span!(l, r),
            optional: false,
            module: spec.module,
            function: spec.function,
            sigs: spec.sigs,
        };
        Attribute::Callback(callback)
    },
    <l:@L> "-" "optional_callback" <spec:TypeSpec> <r:@R> => {
        let callback = Callback {
            span: span!(l, r),
            optional: true,
            module: spec.module,
            function: spec.function,
            sigs: spec.sigs,
        };
        Attribute::Callback(callback)
    }
};

DeprecatedAttribute: Attribute = {
    <l:@L> "-" "deprecated" "(" <a:atom> <flag:("," <DeprecatedFlag>)?>  ")" "." <r:@R> =>? {
        match a.as_str().get() {
            "module" => {
                Ok(Attribute::Deprecation(vec![
                    Deprecation::Module {
                        span: span!(l, r),
                        flag: flag.unwrap_or(DeprecatedFlag::Eventually),
                    }
                ]))
            }
            other => {
                let span = span!(l, r);
                Err(ParserError::ShowDiagnostic { diagnostic: Diagnostic::warning()
                        .with_message("invalid deprecated attribute")
                        .with_labels(vec![
                            Label::primary(span.source_id(), span)
                                .with_message("expected 'module', '{module, Flag}', 'Function/Arity', or '{Function/Arity, Flag}'")
                        ])}.into())
            }
        }
    },
    "-" "deprecated" "(" <d:Deprecation> ")" "."
        => Attribute::Deprecation(vec![d]),
    "-" "deprecated" "(" "[" <ds:CommaOpt<Deprecation>> "]"  ")" "."
        => Attribute::Deprecation(ds),
};

Deprecation: Deprecation = {
    <l:@L> <function:FunctionName> <r:@R>
        => Deprecation::Function { span: span!(l, r), function, flag: DeprecatedFlag::Eventually },
    <l:@L> "{" <function:FunctionName> "," <flag:DeprecatedFlag> "}" <r:@R>
        => Deprecation::Function { span: span!(l, r), function, flag },
    <l:@L> "{" <module:atom> "," <function:atom> "," <flag:DeprecatedFlag> "}" <r:@R> =>? {
        let span = span!(l, r);
        match (module.name, function.name) {
          (symbols::Underscore, symbols::Underscore) => {
            Ok(Deprecation::Module { span, flag })
          }
          _ => {
            Err(ParserError::ShowDiagnostic { diagnostic: Diagnostic::error().with_message("invalid deprecated attribute").with_labels(vec![Label::primary(span.source_id(), span).with_message("expected {'_','_',Flag}")]) }.into())

          }
        }
    },
    <l:@L> "{" <function:atom> "," <arity:arity> "," <flag:DeprecatedFlag> "}" <r:@R> => {
        let span = span!(l, r);
        let f = Span::new(span, FunctionName::new_local(function.name, arity));
        Deprecation::Function { span, function: f, flag }
    }
};

DeprecatedFlag: DeprecatedFlag = {
    <l:@L> <s:StringLiteral> <r:@R> => DeprecatedFlag::Description(s),
    <l:@L> <flag:atom> <r:@R> => {
        match flag.as_str().get() {
            "eventually" => DeprecatedFlag::Eventually,
            "next_version" => DeprecatedFlag::NextVersion,
            "next_major_release" => DeprecatedFlag::NextMajorRelease,
            other => {
                let span = span!(l, r);
                reporter.diagnostic(Diagnostic::warning()
                        .with_message("invalid deprecation flag")
                        .with_labels(vec![
                            Label::primary(span.source_id(), span)
                                .with_message(format!("expected one of 'eventually', 'next_version', or 'next_major_release', got '{}'", other))
                        ]));
                DeprecatedFlag::Eventually
            }
        }
    },
};

UserAttribute: Attribute = {
    <l:@L> "-" <name:atom> "(" <value:Constant> ")" "." <r:@R>
        => Attribute::Custom(UserAttribute { span: span!(l, r), name, value }),
};

TypedRecordFields: Vec<RecordField> = {
    "{" <CommaOpt<TypedRecordField>> "}"
};

TypedRecordField: RecordField = {
    <l:@L> <name:atom> <value:("=" <Expr>)?> <ty:("::" <TopType>)?> <r:@R>
        => RecordField { span: span!(l, r), name: name, value, ty },
};

// Type Specifications

TypeDef: TypeDef = {
    "(" <TypeDef100> ")" => (<>),
    TypeDef100,
};

TypeDef100: TypeDef = {
    <l:@L> <name:atom> "(" <params:CommaOpt<atom_or_var>> ")" "::" <ty:TopType> "." <r:@R>
        => TypeDef { span: span!(l, r), name, params, ty, opaque: false },
};

TypeSpec: TypeSpec = {
    <l:@L> "(" <module:(<atom> ":")?> <function:atom> <sigs:Semi<TypeSig>> ")" "." <r:@R>
        => TypeSpec { span: span!(l, r), module, function, sigs },
    <l:@L> <module:(<atom> ":")?> <function:atom> <sigs:Semi<TypeSig>> "." <r:@R>
        => TypeSpec { span: span!(l, r), module, function, sigs },
};

TypeSig: TypeSig = {
    <l:@L> "(" <params:CommaOpt<TopType>> ")" "->" <ret:TopType> <guards:("when" <Comma<TypeGuard>>)?> <r:@R>
        => TypeSig { span: span!(l, r), params, ret: Box::new(ret), guards },
};

TypeGuard: TypeGuard = {
    // is_subtype is not supported >OTP 19, but is allowed for backwards compatibility
    <l:@L> <name:atom> "(" <var:TypeName> "," <ty:TopType> ")" <r:@R> =>? {
        match name.name.as_str().get() {
            "is_subtype" =>
                Ok(TypeGuard { span: span!(l, r), var, ty }),
            name => {
                let span = span!(l, r);
                Err(ParserError::ShowDiagnostic { diagnostic: Diagnostic::error()
                        .with_message("invalid type constraint")
                        .with_labels(vec![
                            Label::primary(span.source_id(), span)
                                .with_message("expected constraint in the form `Name :: Type`")
                        ])}.into())
            }
        }
    },
    <l:@L> <var:TypeName> "::" <ty:TopType> <r:@R>
        => TypeGuard { span: span!(l, r), var, ty },
};

TopType: Type = {
    <l:@L> <lhs:TopType> "|" <rhs:Type200> <r:@R>
        => Type::union(span!(l, r), lhs, rhs),
    Type100,
};

Type100: Type = {
    <l:@L> <name:atom_or_var> "::" <ty:Type200> <r:@R>
        => Type::Annotated { span: span!(l, r), name, ty: Box::new(ty)  },
    Type200,
};

Type200: Type = {
    <l:@L> <lhs:Type300> ".." <rhs:Type300> <r:@R>
        => Type::Range { span: span!(l, r), start: Box::new(lhs), end: Box::new(rhs) },
    Type300,
};

Type300: Type = {
    <l:@L> <lhs:Type300> <op:TypeAddOp> <rhs:Type400> <r:@R>
        => Type::BinaryOp { span: span!(l, r), lhs: Box::new(lhs), op, rhs: Box::new(rhs) },
    Type400,
};

Type400: Type = {
    <l:@L> <lhs:Type400> <op:TypeMultOp> <rhs:Type500> <r:@R>
        => Type::BinaryOp { span: span!(l, r), lhs: Box::new(lhs), op, rhs: Box::new(rhs) },
    Type500,
};

Type500: Type = {
    <l:@L> <op:TypeUnaryOp> <rhs:Type600> <r:@R>
        => Type::UnaryOp { span: span!(l, r), op, rhs: Box::new(rhs) },
    Type600,
};

Type600: Type = {
    <l:@L> <fun:atom> "(" <params:CommaOpt<TopType>> ")" <r:@R>
        => Type::Generic { span: span!(l, r), fun, params },
    <l:@L> <module:atom> ":" <fun:atom> "(" <args:CommaOpt<TopType>> ")" <r:@R>
        => Type::Remote { span: span!(l, r), module, fun, args },
    TypeMax,
};

TypeMax: Type = {
    "(" <ty:TopType> ")"
        => ty,
    <l:@L> "[" "]" <r:@R>
        => Type::Nil(span!(l, r)),
    <l:@L> "[" <lt:TopType> "]" <r:@R>
        => Type::List(span!(l, r), Box::new(lt)),
    <l:@L> "[" <lt:TopType> "," "..." "]" <r:@R>
        => Type::NonEmptyList(span!(l, r), Box::new(lt)),
    <l:@L> "{" <et:CommaOpt<TopType>> "}" <r:@R>
        => Type::Tuple(span!(l, r), et),
    <l:@L> "#" "{" <ft:CommaOpt<MapFieldType>> "}" <r:@R>
        => Type::Map(span!(l, r), ft),
    <l:@L> "#" <record:atom> "{" <ft:CommaOpt<RecordFieldType>> "}" <r:@R>
        => Type::Record(span!(l, r), record, ft),
    BinaryType,
    <name:TypeName>
        => Type::Name(name),
    <l:@L> <i:int> <r:@R>
        => Type::Integer(span!(l, r), i),
    <l:@L> <c:char> <r:@R>
        => Type::Char(span!(l, r), c),
    FunType,
};

TypeName: Name = {
    <name:atom_or_var>
        => name,
    // While this is stupid, generated code by elixir
    // uses 'fun' as a variable a lot in in typespecs.
    // Hack to make this work.
    <l:@L> "fun" <r:@R>
        => Name::Var(Ident::new(Symbol::intern("fun"), span!(l, r))),
};

BinaryType: Type = {
    <l:@L> "<<" ">>" <r:@R>
        => Type::Binary(span!(l, r), Box::new(Type::Integer(span!(l, r), 0.into())), Box::new(Type::Integer(span!(l, r), 0.into()))),
    <l:@L> "<<" ident ":" <m:TopType> ">>" <r:@R>
        => Type::Binary(span!(l, r), Box::new(m), Box::new(Type::Integer(span!(l, r), 0.into()))),
    <l:@L> "<<" ident ":" <m:TopType> "," ident ":" <n:TopType> ">>" <r:@R>
        => Type::Binary(span!(l, r), Box::new(m), Box::new(n)),
};

FunType: Type = {
    <l:@L> "fun" "(" ")" <r:@R>
        => Type::AnyFun { span: span!(l, r), ret: None },
    <l:@L> "fun" "(" "(" "..." ")" "->" <ret:TopType> ")" <r:@R>
        => Type::AnyFun { span: span!(l, r), ret: Some(Box::new(ret)) },
    <l:@L> "fun" "(" "(" <params:CommaOpt<TopType>> ")" "->" <ret:TopType> ")" <r:@R>
        => Type::Fun { span: span!(l, r), params, ret: Box::new(ret) },
};

MapFieldType: Type = {
    <l:@L> <key:TopType> "=>" <val:TopType> <r:@R>
        => Type::KeyValuePair(span!(l, r), Box::new(key), Box::new(val)),
    <l:@L> <key:TopType> ":=" <val:TopType> <r:@R>
        => Type::KeyValuePair(span!(l, r), Box::new(key), Box::new(val)),
};

RecordFieldType: Type = {
    <l:@L> <key:atom> "::" <val:TopType> <r:@R>
        => Type::Field(span!(l, r), key, Box::new(val)),
};

// Pattern Matching

Pattern: Expr = {
    <l:@L> <lhs:Pattern200> "=" <rhs:Pattern> <r:@R>
        => Expr::Match(Match { span: span!(l, r), pattern: Box::new(lhs), expr: Box::new(rhs) }),
    Pattern200
};

Pattern200: Expr = {
    <l:@L> <lhs:Pattern300> <op:CompOp> <rhs:Pattern300> <r:@R>
        => Expr::BinaryExpr(BinaryExpr { span: span!(l, r), lhs: Box::new(lhs), op, rhs: Box::new(rhs) }),
    Pattern300
};

Pattern300: Expr = {
    <l:@L> <lhs:Pattern400> <op:ListOp> <rhs:Pattern300> <r:@R>
        => Expr::BinaryExpr(BinaryExpr { span: span!(l, r), lhs: Box::new(lhs), op, rhs: Box::new(rhs) }),
    Pattern400
};

Pattern400: Expr = {
    <l:@L> <lhs:Pattern400> <op:AddOp> <rhs:Pattern500> <r:@R>
        => Expr::BinaryExpr(BinaryExpr { span: span!(l, r), lhs: Box::new(lhs), op, rhs: Box::new(rhs) }),
    Pattern500
};

Pattern500: Expr = {
    <l:@L> <lhs:Pattern500> <op:MultOp> <rhs:Pattern600> <r:@R>
        => Expr::BinaryExpr(BinaryExpr { span: span!(l, r), lhs: Box::new(lhs), op, rhs: Box::new(rhs) }),
    Pattern600
};

Pattern600: Expr = {
    <l:@L> <op:PrefixOp> <rhs:Pattern700> <r:@R>
        => Expr::UnaryExpr(UnaryExpr { span: span!(l, r), op, operand: Box::new(rhs) }),
    MapPattern,
    Pattern700
};

Pattern700: Expr = {
    RecordPattern,
    PatternMax
};

PatternMax: Expr = {
    <i:Ident> => Expr::Var(Var(i)),
    Atomic,
    ListPattern,
    Binary,
    Tuple,
    "(" <Pattern> ")"
};

ListPattern: Expr = {
    <l:@L> "[" "]" <r:@R>
        => Expr::Literal(Literal::Nil(span!(l, r))),
    <l:@L> "[" <head:Pattern> <tail:TailPattern> <r:@R>
        => Expr::Cons(Cons { span: span!(l, r), head: Box::new(head), tail: Box::new(tail) })
};

TailPattern: Expr = {
    <l:@L> "]" <r:@R>
        => Expr::Literal(Literal::Nil(span!(l, r))),
    "|" <Pattern> "]",
    <l:@L> "," <head:Pattern> <tail:TailPattern> <r:@R>
        => Expr::Cons(Cons { span: span!(l, r), head: Box::new(head), tail: Box::new(tail) })
};

MapPattern: Expr = {
    <l:@L> "#" <fields:MapTuplePattern> <r:@R>
        => Expr::Map(Map { span: span!(l, r), fields }),
};

MapTuplePattern: Vec<MapField> = {
    "{" <CommaOpt<MapFieldPattern>> "}"
};

MapFieldPattern: MapField = {
    <l:@L> <key:Pattern> ":=" <value:Pattern> <r:@R>
        => MapField::Exact { span: span!(l, r), key, value },
};

RecordPattern: Expr = {
    <l:@L> "#" <name:atom> "." <field:atom> <r:@R>
        => Expr::RecordIndex(RecordIndex { span: span!(l, r), name, field }),
    <l:@L> "#" <name:atom> <fields:RecordTuplePattern> <r:@R>
        => Expr::Record(Record { span: span!(l, r), name, fields }),
};

RecordTuplePattern: Vec<RecordField> = {
    "{" <CommaOpt<RecordFieldPattern>> "}"
};

RecordFieldPattern: RecordField = {
    <l:@L> <name:atom> "=" <value:Pattern> <r:@R>
        => RecordField { span: span!(l, r), name, value: Some(value), ty: None },
};

// Expressions

pub Expr: Expr = {
    <l:@L> "catch" <e:Expr> <r:@R>
        => Expr::Catch(Catch { span: span!(l, r), expr: Box::new(e) }),
    Expr100,
};

Expr100: Expr = {
    // We would like to use Pattern200 here, but this leads to an ambiguity conflict
    // between non-terminals which are same in structure but different type, e.g. Tuple/TuplePattern,
    // so we just need to be aware that Expr::Match is really a pattern expression
    <l:@L> <lhs:Expr100> "=" <rhs:Expr140> <r:@R>
        => Expr::Match(Match { span: span!(l, r), pattern: Box::new(lhs), expr: Box::new(rhs) }),
    Expr140,
};

Expr140: Expr = {
    <l:@L> <lhs:Expr140> "!" <rhs:Expr150> <r:@R>
        => Expr::BinaryExpr(BinaryExpr { span: span!(l, r), lhs: Box::new(lhs), op: BinaryOp::Send, rhs: Box::new(rhs) }),
    Expr150
};

Expr150: Expr = {
    <l:@L> <lhs:Expr160> "orelse" <rhs:Expr150> <r:@R>
        => Expr::BinaryExpr(BinaryExpr { span: span!(l, r), lhs: Box::new(lhs), op: BinaryOp::OrElse, rhs: Box::new(rhs) }),
    Expr160
};

Expr160: Expr = {
    <l:@L> <lhs:Expr200> "andalso" <rhs:Expr160> <r:@R>
        => Expr::BinaryExpr(BinaryExpr { span: span!(l, r), lhs: Box::new(lhs), op: BinaryOp::AndAlso, rhs: Box::new(rhs) }),
    Expr200
};

Expr200: Expr = {
    <l:@L> <lhs:Expr300> <op:CompOp> <rhs:Expr300> <r:@R>
        => Expr::BinaryExpr(BinaryExpr { span: span!(l, r), lhs: Box::new(lhs), op, rhs: Box::new(rhs) }),
    Expr300
};

Expr300: Expr = {
    <l:@L> <lhs:Expr400> <op:ListOp> <rhs:Expr300> <r:@R>
        => Expr::BinaryExpr(BinaryExpr { span: span!(l, r), lhs: Box::new(lhs), op, rhs: Box::new(rhs) }),
    Expr400
};

Expr400: Expr = {
    <l:@L> <lhs:Expr400> <op:AddOp> <rhs:Expr500> <r:@R>
        => Expr::BinaryExpr(BinaryExpr { span: span!(l, r), lhs: Box::new(lhs), op, rhs: Box::new(rhs) }),
    Expr500
};

Expr500: Expr = {
    <l:@L> <lhs:Expr500> <op:MultOp> <rhs:Expr600> <r:@R>
        => Expr::BinaryExpr(BinaryExpr { span: span!(l, r), lhs: Box::new(lhs), op, rhs: Box::new(rhs) }),
    Expr600
};

Expr600: Expr = {
    <l:@L> <op:PrefixOp> <rhs:Expr700> <r:@R>
        => Expr::UnaryExpr(UnaryExpr { span: span!(l, r), op, operand: Box::new(rhs) }),
    MapExpr,
    Expr700
};

Expr700: Expr = {
    Apply,
    RecordExpr,
    Expr800
};

Expr800: Expr = {
    <l:@L> <lhs:ExprMax> ":" <rhs:ExprMax> <r:@R>
        => Expr::Remote(Remote { span: span!(l, r), module: Box::new(lhs), function: Box::new(rhs) }),
    ExprMax
};

ExprMax: Expr = {
    <i:Ident> => Expr::Var(Var(i)),
    Atomic,
    Tuple,
    List,
    Binary,
    ListComprehension,
    BinaryComprehension,
    "(" <Expr> ")",
    <l:@L> "begin" <body:Comma<Expr>> "end" <r:@R>
        => Expr::Begin(Begin { span: span!(l, r), body }),
    If,
    Case,
    Receive,
    Try,
    Fun,
    DelayedSubstitution,
};

Fun: Expr = {
    "fun" <fun:FunctionName>
        => Expr::FunctionVar(FunctionVar::PartiallyResolved(fun)),
    <l:@L> "fun" <module:atom_or_var> ":" <function:atom_or_var> "/" <arity:arity_or_var> <r:@R> =>
        Expr::FunctionVar(FunctionVar::detect(span!(l, r), Some(module), function, arity)),
    <l:@L> "fun" <clauses:Semi<FunctionClause>> "end" <r:@R> =>? {
        Fun::new(reporter, span!(l, r), clauses).map(Expr::Fun).map_err(|e| e.into())
    },
};

If: Expr = {
    <l:@L> "if" <clauses:Semi<IfClause>> "end" <r:@R>
        => Expr::If(If { span: span!(l, r), clauses })
};
IfClause: Clause = {
    <l:@L> <guards:BaseGuards> "->" <body:Comma<Expr>> <r:@R>
        => Clause::new(span!(l, r), vec![Expr::Var(Var(Ident::from_str("_")))], guards, body, false)
};

Case: Expr = {
    <l:@L> "case" <input:Expr> "of" <clauses:Semi<Clause>> "end" <r:@R>
        => Expr::Case(Case { span: span!(l, r), expr: Box::new(input), clauses })
};

Receive: Expr = {
    <l:@L> "receive" <after:After> "end" <r:@R>
        => Expr::Receive(Receive { span: span!(l, r), clauses: None, after: Some(after) }),
    <l:@L> "receive" <clauses:Semi<Clause>> <after:After?> "end" <r:@R>
        => Expr::Receive(Receive { span: span!(l, r), clauses: Some(clauses), after })
};

After: After = {
    <l:@L> "after" <timeout:Expr> "->" <body:Comma<Expr>> <r:@R>
        => After { span: span!(l, r), timeout: Box::new(timeout), body }
};

Try: Expr = {
    <l:@L> "try" <exprs:Comma<Expr>> "of" <clauses:Semi<Clause>> <catch:TryCatch>
        => Expr::Try(Try { span: span!(l, catch.2), exprs, clauses: Some(clauses), catch_clauses: catch.0, after: catch.1 }),
    <l:@L> "try" <exprs:Comma<Expr>> <catch:TryCatch>
        => Expr::Try(Try { span: span!(l, catch.2), exprs, clauses: None, catch_clauses: catch.0, after: catch.1 })
};

TryCatch: (Option<Vec<Clause>>, Option<Vec<Expr>>, SourceIndex) = {
    "catch" <clauses:Semi<TryClause>> "end" <r:@R>
        => (Some(clauses), None, r),
    "catch" <clauses:Semi<TryClause>> "after" <body:Comma<Expr>> "end" <r:@R>
        => (Some(clauses), Some(body), r),
    "after" <body:Comma<Expr>> "end" <r:@R>
        => (None, Some(body), r)
};

TryClause: Clause = {
    <l:@L> <error:Pattern> <guards:Guards?> "->" <body:Comma<Expr>> <r:@R>
        => Clause::for_catch(span!(l, r), Expr::Literal(Literal::Atom(Ident::from_str("throw"))), error, None, guards.unwrap_or_default(), body),
    <l:@L> <kind:atom_or_var> ":" <error:Pattern> <guards:Guards?> "->" <body:Comma<Expr>> <r:@R>
        => Clause::for_catch(span!(l, r), kind.into(), error, None, guards.unwrap_or_default(), body),
    <l:@L> <kind:atom_or_var> ":" <error:Pattern> ":" <trace:Ident> <guards:Guards?> "->" <body:Comma<Expr>> <r:@R>
        => Clause::for_catch(span!(l, r), kind.into(), error, Some(Expr::Var(Var(trace))), guards.unwrap_or_default(), body),
};

Clause: Clause = {
    <l:@L> <pattern:Pattern> <guards:Guards?> "->" <body:Comma<Expr>> <r:@R>
        => Clause::new(span!(l, r), vec![pattern], guards.unwrap_or_default(), body, false)
};

Apply: Expr = {
    <l:@L> <lhs:Expr800> "(" <args:CommaOpt<Expr>> ")" <r:@R>
        => Expr::try_resolve_apply(span!(l, r), lhs, args)
};

ListComprehension: Expr = {
    <l:@L> "[" <body:Expr> "||" <qualifiers:Comma<ComprehensionExpr>> "]" <r:@R>
        => Expr::ListComprehension(ListComprehension { span: span!(l, r), body: Box::new(body), qualifiers }),
};

BinaryComprehension: Expr = {
    <l:@L> "<<" <body:ExprMax> "||" <qualifiers:Comma<ComprehensionExpr>> ">>" <r:@R>
        => Expr::BinaryComprehension(BinaryComprehension { span: span!(l, r), body: Box::new(body), qualifiers }),
};

ComprehensionExpr: Expr = {
    <l:@L> <lhs:Binary> "<=" <rhs:Expr> <r:@R>
        => Expr::Generator(Generator { span: span!(l, r), ty: GeneratorType::Bitstring, pattern: Box::new(lhs), expr: Box::new(rhs) }),
    <l:@L> <lhs:Expr> "<-" <rhs:Expr> <r:@R>
        => Expr::Generator(Generator { span: span!(l, r), ty: GeneratorType::Default, pattern: Box::new(lhs), expr: Box::new(rhs) }),
    Expr,
};

Binary: Expr = {
    <l:@L> "<<" <elements:CommaOpt<BinaryElement>> ">>" <r:@R>
        => Expr::Binary(Binary { span: span!(l, r), elements }),
};

BinaryElement: BinaryElement = {
    <l:@L> <be:BitExpr> <bs:BitSize?> <bts:BitTypeList?> <r:@R> => {
        let spec = bts.as_ref().map(|b| match specifier_from_parsed(b, bs.is_some()) {
            Ok(specifier) => specifier,
            Err(error) => {
                // TODO
                reporter.error(error);
                BinaryEntrySpecifier::default()
            },
        });
        BinaryElement { span: span!(l, r), bit_expr: be, bit_size: bs, specifier: spec }
    }
};

BitExpr: Expr = {
    <l:@L> <op:PrefixOp> <rhs:ExprMax> <r:@R>
        => Expr::UnaryExpr(UnaryExpr { span: span!(l, r), op, operand: Box::new(rhs) }),
    ExprMax,
};

BitSize: Expr = {
    ":" <ExprMax>,
};

BitTypeList: Vec<BitType> = {
    "/" <bts:Dash<BitType>> => bts,
};

BitType: BitType = {
    <l:@L> <ty:atom> ":" <i:int> <r:@R>
        => BitType::Sized(span!(l, r), ty, i.to_usize().unwrap()),
    <l:@L> <ty:atom> <r:@R>
        => BitType::Name(span!(l, r), ty)
};

Tuple: Expr = {
    <l:@L> "{" <elements:CommaOpt<Expr>> "}" <r:@R>
        => Expr::Tuple(Tuple { span: span!(l, r), elements })
};

List: Expr = {
    <l:@L> "[" "]" <r:@R>
        => Expr::Literal(Literal::Nil(span!(l, r))),
    <l:@L> "[" <head:Expr> <tail:Tail> <r:@R>
        => Expr::Cons(Cons { span: span!(l, r), head: Box::new(head), tail: Box::new(tail) })
};

Tail: Expr = {
    <l:@L> "]" <r:@R>
        => Expr::Literal(Literal::Nil(span!(l, r))),
    "|" <Expr> "]",
    <l:@L> "," <head:Expr> <tail:Tail> <r:@R>
        => Expr::Cons(Cons { span: span!(l, r), head: Box::new(head), tail: Box::new(tail) })
};

MapExpr: Expr = {
    <l:@L> "#" <fields:MapTuple> <r:@R>
        => Expr::Map(Map { span: span!(l, r), fields }),
    <l:@L> <map:ExprMax> "#" <updates:MapTuple> <r:@R>
        => Expr::MapUpdate(MapUpdate { span: span!(l, r), map: Box::new(map), updates }),
    <l:@L> <map:MapExpr> "#" <updates:MapTuple> <r:@R>
        => Expr::MapUpdate(MapUpdate { span: span!(l, r), map: Box::new(map), updates }),
};

MapTuple: Vec<MapField> = {
    "{" <CommaOpt<MapField>> "}"
};

MapField: MapField = {
    MapFieldAssoc,
    MapFieldExact
};
MapFieldAssoc: MapField = {
    <l:@L> <key:MapKey> "=>" <value:Expr> <r:@R>
        => MapField::Assoc { span: span!(l, r), key, value }
};
MapFieldExact: MapField = {
    <l:@L> <key:MapKey> ":=" <value:Expr> <r:@R>
        => MapField::Exact { span: span!(l, r), key, value }
};

MapKey: Expr = Expr;

RecordExpr: Expr = {
    <l:@L> "#" <name:atom> "." <field:atom> <r:@R>
        => Expr::RecordIndex(RecordIndex { span: span!(l, r), name, field }),
    <l:@L> "#" <name:atom> <fields:RecordTuple> <r:@R>
        => Expr::Record(Record { span: span!(l, r), name, fields }),

    <l:@L> <lhs:ExprMax> "#" <name:atom> "." <field:atom> <r:@R>
        => Expr::RecordAccess(RecordAccess { span: span!(l, r), record: Box::new(lhs), name, field }),
    <l:@L> <lhs:ExprMax> "#" <name:atom> <updates:RecordTuple> <r:@R>
        => Expr::RecordUpdate(RecordUpdate { span: span!(l, r), record: Box::new(lhs), name, updates }),

    <l:@L> <lhs:RecordExpr> "#" <name:atom> "." <field:atom> <r:@R>
        => Expr::RecordAccess(RecordAccess { span: span!(l, r), record: Box::new(lhs), name, field }),
    <l:@L> <lhs:RecordExpr> "#" <name:atom> <updates:RecordTuple> <r:@R>
        => Expr::RecordUpdate(RecordUpdate { span: span!(l, r), record: Box::new(lhs), name, updates }),
};

RecordTuple: Vec<RecordField> = {
    "{" <CommaOpt<RecordField>> "}"
};

RecordField: RecordField = {
    <l:@L> <name:atom> "=" <value:Expr> <r:@R>
        => RecordField { span: span!(l, r), name, value: Some(value), ty: None },
};

Constant: Expr = {
    ConstantTuple,
    ConstantList,
    ConstantMapExpr,
    <FunctionName> =>
        Expr::FunctionVar(FunctionVar::PartiallyResolved(<>)),
    Atomic,
};


ConstantTuple: Expr = {
    <l:@L> "{" <elements:CommaOpt<Constant>> "}" <r:@R>
        => Expr::Tuple(Tuple { span: span!(l, r), elements })
};

ConstantList: Expr = {
    <l:@L> "[" "]" <r:@R>
        => Expr::Literal(Literal::Nil(span!(l, r))),
    <l:@L> "[" <head:Constant> <tail:ConstantTail> <r:@R>
        => Expr::Cons(Cons { span: span!(l, r), head: Box::new(head), tail: Box::new(tail) })
};

ConstantTail: Expr = {
    <l:@L> "]" <r:@R>
        => Expr::Literal(Literal::Nil(span!(l, r))),
    "|" <Constant> "]",
    <l:@L> "," <head:Constant> <tail:ConstantTail> <r:@R>
        => Expr::Cons(Cons { span: span!(l, r), head: Box::new(head), tail: Box::new(tail) })
};

ConstantMapExpr: Expr = {
    <l:@L> "#" <fields:ConstantMapTuple> <r:@R>
        => Expr::Map(Map { span: span!(l, r), fields }),
};

ConstantMapTuple: Vec<MapField> = {
    "{" <CommaOpt<ConstantMapField>> "}"
};

ConstantMapField: MapField = {
    <l:@L> <key:MapKey> "=>" <value:Constant> <r:@R>
        => MapField::Assoc { span: span!(l, r), key, value }
};

ConstantMapKey: Expr = Constant;

Atomic: Expr = {
    <l:@L> <c:char> <r:@R>
        => Expr::Literal(Literal::Char(span!(l, r), c)),
    <Integer>
        => Expr::Literal(<>),
    <l:@L> <f:float> <r:@R>
        => Expr::Literal(Literal::Float(span!(l, r), f)),
    <atom>
        => Expr::Literal(Literal::Atom(<>)),
    <s:StringLiteral>
        => Expr::Literal(Literal::String(s)),
};

StringLiteral: Ident = <l:@L> <s:string+> <r:@R> => {
    let span = span!(l, r);
    if s.len() == 1 {
        Ident::new(s[0], span)
    } else {
        let mut buf = String::new();
        for frag in s.iter() {
            buf.push_str(&frag.as_str());
        }
        let symbol = Symbol::intern(&buf);

        Ident::new(symbol, span)
    }
};

DelayedSubstitution: Expr = {
    <l:@L> <subs: delayed_substitution> <r:@R> =>
        Expr::DelayedSubstitution(span!(l, r), subs),
};

#[inline]
atom_or_var: Name = {
    <a:atom> => Name::Atom(a),
    <i:Ident> => Name::Var(i),
};

#[inline]
atom: Ident = <l:@L> <a:"atom"> <r:@R>
    => Ident::new(a, span!(l, r));

#[inline]
Ident: Ident = <l:@L> <i:ident> <r:@R>
    => Ident::new(i, span!(l, r));

#[inline]
Integer: Literal = {
    <l:@L> <i:int> <r:@R>
        => Literal::Integer(span!(l, r), i),
};

#[inline]
arity_or_var: Arity = {
    <i:int> => Arity::Int(i.try_into().unwrap()),
    <i:Ident> => Arity::Var(i),
};

#[inline]
arity: u8 = <i:int> => i.try_into().unwrap();

#[inline]
ident_or_integer: Expr = {
    <i:Ident> => Expr::Var(Var(i)),
    <i:Integer> => Expr::Literal(i)
}

PrefixOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "bnot" => UnaryOp::Bnot,
    "not" => UnaryOp::Not,
};

MultOp: BinaryOp = {
    "/" => BinaryOp::Divide,
    "*" => BinaryOp::Multiply,
    "div" => BinaryOp::Div,
    "rem" => BinaryOp::Rem,
    "band" => BinaryOp::Band,
    "and" => BinaryOp::And,
};

AddOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
    "bor" => BinaryOp::Bor,
    "bxor" => BinaryOp::Bxor,
    "bsl" => BinaryOp::Bsl,
    "bsr" => BinaryOp::Bsr,
    "or" => BinaryOp::Or,
    "xor" => BinaryOp::Xor,
};

TypeMultOp: BinaryOp = {
    "*" => BinaryOp::Multiply,
    "div" => BinaryOp::Div,
    "rem" => BinaryOp::Rem,
    "band" => BinaryOp::Band,
};

TypeAddOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
    "bor" => BinaryOp::Bor,
    "bxor" => BinaryOp::Bxor,
    "bsl" => BinaryOp::Bsl,
    "bsr" => BinaryOp::Bsr,
};

TypeUnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "bnot" => UnaryOp::Bnot,
};

ListOp: BinaryOp = {
    "++" => BinaryOp::Append,
    "--" => BinaryOp::Remove,
};

CompOp: BinaryOp = {
    "==" => BinaryOp::Equal,
    "/=" => BinaryOp::NotEqual,
    "=<" => BinaryOp::Lte,
    "<" => BinaryOp::Lt,
    ">=" => BinaryOp::Gte,
    ">" => BinaryOp::Gt,
    "=:=" => BinaryOp::StrictEqual,
    "=/=" => BinaryOp::StrictNotEqual
};

BaseInt: Integer = {
    "-" <i:int> => -i,
    <i:int> => i,
};
Float: Float = {
    "-" <i:float> => -i,
    <i:float> => i,
};

extern {
    type Location = SourceIndex;
    type Error = crate::ParserError;

    enum Token {
        // Docs
        "COMMENT" => Token::Comment,
        // Literals
        char => Token::Char(<char>),
        int => Token::Integer(<Integer>),
        float => Token::Float(<Float>),
        "atom" => Token::Atom(<Symbol>),
        string => Token::String(<Symbol>),
        ident => Token::Ident(<Symbol>),
        delayed_substitution => Token::DelayedSubstitution(<DelayedSubstitution>),
        // Keywords and Symbols
        "(" => Token::LParen,
        ")" => Token::RParen,
        "," => Token::Comma,
        "->" => Token::RightStab,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        "|" => Token::Bar,
        "||" => Token::BarBar,
        "<-" => Token::LeftStab,
        ";" => Token::Semicolon,
        ":" => Token::Colon,
        "#" => Token::Pound,
        "." => Token::Dot,
        "after" => Token::After,
        "begin" => Token::Begin,
        "case" => Token::Case,
        "try" => Token::Try,
        "catch" => Token::Catch,
        "end" => Token::End,
        "fun" => Token::Fun,
        "if" => Token::If,
        "of" => Token::Of,
        "receive" => Token::Receive,
        "when" => Token::When,
        "record" => Token::Record,
        "spec" => Token::Spec,
        "callback" => Token::Callback,
        "optional_callback" => Token::OptionalCallback,
        "import" => Token::Import,
        "export" => Token::Export,
        "removed" => Token::Removed,
        "export_type" => Token::ExportType,
        "module" => Token::Module,
        "compile" => Token::Compile,
        "vsn" => Token::Vsn,
        "author" => Token::Author,
        "on_load" => Token::OnLoad,
        "nifs" => Token::Nifs,
        "behaviour" => Token::Behaviour,
        "deprecated" => Token::Deprecated,
        "type" => Token::Type,
        "opaque" => Token::Opaque,
        "file" => Token::File,
        "andalso" => Token::AndAlso,
        "orelse" => Token::OrElse,
        "bnot" => Token::Bnot,
        "not" => Token::Not,
        "*" => Token::Star,
        "/" => Token::Slash,
        "div" => Token::Div,
        "rem" => Token::Rem,
        "band" => Token::Band,
        "and" => Token::And,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "bor" => Token::Bor,
        "bxor" => Token::Bxor,
        "bsl" => Token::Bsl,
        "bsr" => Token::Bsr,
        "or" => Token::Or,
        "xor" => Token::Xor,
        "++" => Token::PlusPlus,
        "--" => Token::MinusMinus,
        "==" => Token::IsEqual,
        "/=" => Token::IsNotEqual,
        "=<" => Token::IsLessThanOrEqual,
        "<" => Token::IsLessThan,
        ">=" => Token::IsGreaterThanOrEqual,
        ">" => Token::IsGreaterThan,
        "=:=" => Token::IsExactlyEqual,
        "=/=" => Token::IsExactlyNotEqual,
        "<=" => Token::LeftArrow,
        "=>" => Token::RightArrow,
        ":=" => Token::ColonEqual,
        "<<" => Token::BinaryStart,
        ">>" => Token::BinaryEnd,
        "!" => Token::Bang,
        "=" => Token::Equals,
        "::" => Token::ColonColon,
        ".." => Token::DotDot,
        "..." => Token::DotDotDot,
        "?" => Token::Question,
    }
}
