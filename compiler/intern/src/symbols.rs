///! AUTOGENERATED by build.rs - do not modify this file
use crate::Symbol;
#[allow(non_upper_case_globals)]
pub const False: Symbol = Symbol::new(0);

#[allow(non_upper_case_globals)]
pub const True: Symbol = Symbol::new(1);

#[allow(non_upper_case_globals)]
pub const Empty: Symbol = Symbol::new(2);

#[allow(non_upper_case_globals)]
pub const After: Symbol = Symbol::new(3);

#[allow(non_upper_case_globals)]
pub const And: Symbol = Symbol::new(4);

#[allow(non_upper_case_globals)]
pub const AndAlso: Symbol = Symbol::new(5);

#[allow(non_upper_case_globals)]
pub const Band: Symbol = Symbol::new(6);

#[allow(non_upper_case_globals)]
pub const Begin: Symbol = Symbol::new(7);

#[allow(non_upper_case_globals)]
pub const Bnot: Symbol = Symbol::new(8);

#[allow(non_upper_case_globals)]
pub const Bor: Symbol = Symbol::new(9);

#[allow(non_upper_case_globals)]
pub const Bsl: Symbol = Symbol::new(10);

#[allow(non_upper_case_globals)]
pub const Bsr: Symbol = Symbol::new(11);

#[allow(non_upper_case_globals)]
pub const Bxor: Symbol = Symbol::new(12);

#[allow(non_upper_case_globals)]
pub const Case: Symbol = Symbol::new(13);

#[allow(non_upper_case_globals)]
pub const Catch: Symbol = Symbol::new(14);

#[allow(non_upper_case_globals)]
pub const Div: Symbol = Symbol::new(15);

#[allow(non_upper_case_globals)]
pub const End: Symbol = Symbol::new(16);

#[allow(non_upper_case_globals)]
pub const Fun: Symbol = Symbol::new(17);

#[allow(non_upper_case_globals)]
pub const If: Symbol = Symbol::new(18);

#[allow(non_upper_case_globals)]
pub const Not: Symbol = Symbol::new(19);

#[allow(non_upper_case_globals)]
pub const Of: Symbol = Symbol::new(20);

#[allow(non_upper_case_globals)]
pub const Or: Symbol = Symbol::new(21);

#[allow(non_upper_case_globals)]
pub const OrElse: Symbol = Symbol::new(22);

#[allow(non_upper_case_globals)]
pub const Receive: Symbol = Symbol::new(23);

#[allow(non_upper_case_globals)]
pub const Rem: Symbol = Symbol::new(24);

#[allow(non_upper_case_globals)]
pub const Try: Symbol = Symbol::new(25);

#[allow(non_upper_case_globals)]
pub const When: Symbol = Symbol::new(26);

#[allow(non_upper_case_globals)]
pub const Xor: Symbol = Symbol::new(27);

#[allow(non_upper_case_globals)]
pub const Author: Symbol = Symbol::new(28);

#[allow(non_upper_case_globals)]
pub const Behaviour: Symbol = Symbol::new(29);

#[allow(non_upper_case_globals)]
pub const Callback: Symbol = Symbol::new(30);

#[allow(non_upper_case_globals)]
pub const Compile: Symbol = Symbol::new(31);

#[allow(non_upper_case_globals)]
pub const Deprecated: Symbol = Symbol::new(32);

#[allow(non_upper_case_globals)]
pub const Export: Symbol = Symbol::new(33);

#[allow(non_upper_case_globals)]
pub const ExportType: Symbol = Symbol::new(34);

#[allow(non_upper_case_globals)]
pub const Import: Symbol = Symbol::new(35);

#[allow(non_upper_case_globals)]
pub const Module: Symbol = Symbol::new(36);

#[allow(non_upper_case_globals)]
pub const Nifs: Symbol = Symbol::new(37);

#[allow(non_upper_case_globals)]
pub const OnLoad: Symbol = Symbol::new(38);

#[allow(non_upper_case_globals)]
pub const Opaque: Symbol = Symbol::new(39);

#[allow(non_upper_case_globals)]
pub const Spec: Symbol = Symbol::new(40);

#[allow(non_upper_case_globals)]
pub const Type: Symbol = Symbol::new(41);

#[allow(non_upper_case_globals)]
pub const Vsn: Symbol = Symbol::new(42);

#[allow(non_upper_case_globals)]
pub const Define: Symbol = Symbol::new(43);

#[allow(non_upper_case_globals)]
pub const Elif: Symbol = Symbol::new(44);

#[allow(non_upper_case_globals)]
pub const Else: Symbol = Symbol::new(45);

#[allow(non_upper_case_globals)]
pub const Endif: Symbol = Symbol::new(46);

#[allow(non_upper_case_globals)]
pub const Error: Symbol = Symbol::new(47);

#[allow(non_upper_case_globals)]
pub const File: Symbol = Symbol::new(48);

#[allow(non_upper_case_globals)]
pub const Ifdef: Symbol = Symbol::new(49);

#[allow(non_upper_case_globals)]
pub const Ifndef: Symbol = Symbol::new(50);

#[allow(non_upper_case_globals)]
pub const Include: Symbol = Symbol::new(51);

#[allow(non_upper_case_globals)]
pub const IncludeLib: Symbol = Symbol::new(52);

#[allow(non_upper_case_globals)]
pub const Line: Symbol = Symbol::new(53);

#[allow(non_upper_case_globals)]
pub const Undef: Symbol = Symbol::new(54);

#[allow(non_upper_case_globals)]
pub const Warning: Symbol = Symbol::new(55);

#[allow(non_upper_case_globals)]
pub const COMPILER_VSN: Symbol = Symbol::new(56);

#[allow(non_upper_case_globals)]
pub const VSN: Symbol = Symbol::new(57);

#[allow(non_upper_case_globals)]
pub const Bang: Symbol = Symbol::new(58);

#[allow(non_upper_case_globals)]
pub const Star: Symbol = Symbol::new(59);

#[allow(non_upper_case_globals)]
pub const Plus: Symbol = Symbol::new(60);

#[allow(non_upper_case_globals)]
pub const PlusPlus: Symbol = Symbol::new(61);

#[allow(non_upper_case_globals)]
pub const Minus: Symbol = Symbol::new(62);

#[allow(non_upper_case_globals)]
pub const MinusMinus: Symbol = Symbol::new(63);

#[allow(non_upper_case_globals)]
pub const Slash: Symbol = Symbol::new(64);

#[allow(non_upper_case_globals)]
pub const NotEqual: Symbol = Symbol::new(65);

#[allow(non_upper_case_globals)]
pub const Lt: Symbol = Symbol::new(66);

#[allow(non_upper_case_globals)]
pub const NotEqualStrict: Symbol = Symbol::new(67);

#[allow(non_upper_case_globals)]
pub const EqualStrict: Symbol = Symbol::new(68);

#[allow(non_upper_case_globals)]
pub const Lte: Symbol = Symbol::new(69);

#[allow(non_upper_case_globals)]
pub const Equal: Symbol = Symbol::new(70);

#[allow(non_upper_case_globals)]
pub const Gt: Symbol = Symbol::new(71);

#[allow(non_upper_case_globals)]
pub const Gte: Symbol = Symbol::new(72);

#[allow(non_upper_case_globals)]
pub const Underscore: Symbol = Symbol::new(73);

#[allow(non_upper_case_globals)]
pub const BadFilter: Symbol = Symbol::new(74);

#[allow(non_upper_case_globals)]
pub const BadGenerator: Symbol = Symbol::new(75);

#[allow(non_upper_case_globals)]
pub const BadSize: Symbol = Symbol::new(76);

#[allow(non_upper_case_globals)]
pub const BadValue: Symbol = Symbol::new(77);

#[allow(non_upper_case_globals)]
pub const Badarg: Symbol = Symbol::new(78);

#[allow(non_upper_case_globals)]
pub const Badmap: Symbol = Symbol::new(79);

#[allow(non_upper_case_globals)]
pub const Badmatch: Symbol = Symbol::new(80);

#[allow(non_upper_case_globals)]
pub const Badrecord: Symbol = Symbol::new(81);

#[allow(non_upper_case_globals)]
pub const CaseClause: Symbol = Symbol::new(82);

#[allow(non_upper_case_globals)]
pub const FunctionClause: Symbol = Symbol::new(83);

#[allow(non_upper_case_globals)]
pub const IfClause: Symbol = Symbol::new(84);

#[allow(non_upper_case_globals)]
pub const NifError: Symbol = Symbol::new(85);

#[allow(non_upper_case_globals)]
pub const TryClause: Symbol = Symbol::new(86);

#[allow(non_upper_case_globals)]
pub const IsAtom: Symbol = Symbol::new(87);

#[allow(non_upper_case_globals)]
pub const IsBinary: Symbol = Symbol::new(88);

#[allow(non_upper_case_globals)]
pub const IsBitstring: Symbol = Symbol::new(89);

#[allow(non_upper_case_globals)]
pub const IsBoolean: Symbol = Symbol::new(90);

#[allow(non_upper_case_globals)]
pub const IsFloat: Symbol = Symbol::new(91);

#[allow(non_upper_case_globals)]
pub const IsFunction: Symbol = Symbol::new(92);

#[allow(non_upper_case_globals)]
pub const IsInteger: Symbol = Symbol::new(93);

#[allow(non_upper_case_globals)]
pub const IsList: Symbol = Symbol::new(94);

#[allow(non_upper_case_globals)]
pub const IsMap: Symbol = Symbol::new(95);

#[allow(non_upper_case_globals)]
pub const IsNumber: Symbol = Symbol::new(96);

#[allow(non_upper_case_globals)]
pub const IsPid: Symbol = Symbol::new(97);

#[allow(non_upper_case_globals)]
pub const IsPort: Symbol = Symbol::new(98);

#[allow(non_upper_case_globals)]
pub const IsRecord: Symbol = Symbol::new(99);

#[allow(non_upper_case_globals)]
pub const IsReference: Symbol = Symbol::new(100);

#[allow(non_upper_case_globals)]
pub const IsTuple: Symbol = Symbol::new(101);

#[allow(non_upper_case_globals)]
pub const Abs: Symbol = Symbol::new(102);

#[allow(non_upper_case_globals)]
pub const Apply: Symbol = Symbol::new(103);

#[allow(non_upper_case_globals)]
pub const BinaryPart: Symbol = Symbol::new(104);

#[allow(non_upper_case_globals)]
pub const BitSize: Symbol = Symbol::new(105);

#[allow(non_upper_case_globals)]
pub const BuildStacktrace: Symbol = Symbol::new(106);

#[allow(non_upper_case_globals)]
pub const ByteSize: Symbol = Symbol::new(107);

#[allow(non_upper_case_globals)]
pub const Ceil: Symbol = Symbol::new(108);

#[allow(non_upper_case_globals)]
pub const Date: Symbol = Symbol::new(109);

#[allow(non_upper_case_globals)]
pub const Element: Symbol = Symbol::new(110);

#[allow(non_upper_case_globals)]
pub const Float: Symbol = Symbol::new(111);

#[allow(non_upper_case_globals)]
pub const Floor: Symbol = Symbol::new(112);

#[allow(non_upper_case_globals)]
pub const Get: Symbol = Symbol::new(113);

#[allow(non_upper_case_globals)]
pub const GetCookie: Symbol = Symbol::new(114);

#[allow(non_upper_case_globals)]
pub const GetKeys: Symbol = Symbol::new(115);

#[allow(non_upper_case_globals)]
pub const GroupLeader: Symbol = Symbol::new(116);

#[allow(non_upper_case_globals)]
pub const Hd: Symbol = Symbol::new(117);

#[allow(non_upper_case_globals)]
pub const IsAlive: Symbol = Symbol::new(118);

#[allow(non_upper_case_globals)]
pub const IsMapKey: Symbol = Symbol::new(119);

#[allow(non_upper_case_globals)]
pub const Length: Symbol = Symbol::new(120);

#[allow(non_upper_case_globals)]
pub const MakeFun: Symbol = Symbol::new(121);

#[allow(non_upper_case_globals)]
pub const MakeRef: Symbol = Symbol::new(122);

#[allow(non_upper_case_globals)]
pub const MapGet: Symbol = Symbol::new(123);

#[allow(non_upper_case_globals)]
pub const MapSize: Symbol = Symbol::new(124);

#[allow(non_upper_case_globals)]
pub const MatchFail: Symbol = Symbol::new(125);

#[allow(non_upper_case_globals)]
pub const Max: Symbol = Symbol::new(126);

#[allow(non_upper_case_globals)]
pub const Min: Symbol = Symbol::new(127);

#[allow(non_upper_case_globals)]
pub const Node: Symbol = Symbol::new(128);

#[allow(non_upper_case_globals)]
pub const Nodes: Symbol = Symbol::new(129);

#[allow(non_upper_case_globals)]
pub const Ports: Symbol = Symbol::new(130);

#[allow(non_upper_case_globals)]
pub const PreLoaded: Symbol = Symbol::new(131);

#[allow(non_upper_case_globals)]
pub const Processes: Symbol = Symbol::new(132);

#[allow(non_upper_case_globals)]
pub const Raise: Symbol = Symbol::new(133);

#[allow(non_upper_case_globals)]
pub const RawRaise: Symbol = Symbol::new(134);

#[allow(non_upper_case_globals)]
pub const RecvPeekMessage: Symbol = Symbol::new(135);

#[allow(non_upper_case_globals)]
pub const RecvWaitTimeout: Symbol = Symbol::new(136);

#[allow(non_upper_case_globals)]
pub const Registered: Symbol = Symbol::new(137);

#[allow(non_upper_case_globals)]
pub const RemoveMessage: Symbol = Symbol::new(138);

#[allow(non_upper_case_globals)]
pub const Round: Symbol = Symbol::new(139);

#[allow(non_upper_case_globals)]
pub const SELF: Symbol = Symbol::new(140);

#[allow(non_upper_case_globals)]
pub const Setelement: Symbol = Symbol::new(141);

#[allow(non_upper_case_globals)]
pub const Size: Symbol = Symbol::new(142);

#[allow(non_upper_case_globals)]
pub const TermToBinary: Symbol = Symbol::new(143);

#[allow(non_upper_case_globals)]
pub const Throw: Symbol = Symbol::new(144);

#[allow(non_upper_case_globals)]
pub const Time: Symbol = Symbol::new(145);

#[allow(non_upper_case_globals)]
pub const Tl: Symbol = Symbol::new(146);

#[allow(non_upper_case_globals)]
pub const Trunc: Symbol = Symbol::new(147);

#[allow(non_upper_case_globals)]
pub const TupleSize: Symbol = Symbol::new(148);

#[allow(non_upper_case_globals)]
pub const UnpackEnv: Symbol = Symbol::new(149);

#[allow(non_upper_case_globals)]
pub const Closure: Symbol = Symbol::new(150);

#[allow(non_upper_case_globals)]
pub const CompilerGenerated: Symbol = Symbol::new(151);

#[allow(non_upper_case_globals)]
pub const Id: Symbol = Symbol::new(152);

#[allow(non_upper_case_globals)]
pub const RawStack: Symbol = Symbol::new(153);

#[allow(non_upper_case_globals)]
pub const MaybeExpr: Symbol = Symbol::new(154);

#[allow(non_upper_case_globals)]
pub const AnnType: Symbol = Symbol::new(155);

#[allow(non_upper_case_globals)]
pub const Atom: Symbol = Symbol::new(156);

#[allow(non_upper_case_globals)]
pub const Attribute: Symbol = Symbol::new(157);

#[allow(non_upper_case_globals)]
pub const Bc: Symbol = Symbol::new(158);

#[allow(non_upper_case_globals)]
pub const BcGenerate: Symbol = Symbol::new(159);

#[allow(non_upper_case_globals)]
pub const Behavior: Symbol = Symbol::new(160);

#[allow(non_upper_case_globals)]
pub const Bin: Symbol = Symbol::new(161);

#[allow(non_upper_case_globals)]
pub const BinElement: Symbol = Symbol::new(162);

#[allow(non_upper_case_globals)]
pub const Binary: Symbol = Symbol::new(163);

#[allow(non_upper_case_globals)]
pub const Block: Symbol = Symbol::new(164);

#[allow(non_upper_case_globals)]
pub const BoundedFun: Symbol = Symbol::new(165);

#[allow(non_upper_case_globals)]
pub const Call: Symbol = Symbol::new(166);

#[allow(non_upper_case_globals)]
pub const Char: Symbol = Symbol::new(167);

#[allow(non_upper_case_globals)]
pub const Clause: Symbol = Symbol::new(168);

#[allow(non_upper_case_globals)]
pub const Cons: Symbol = Symbol::new(169);

#[allow(non_upper_case_globals)]
pub const Constraint: Symbol = Symbol::new(170);

#[allow(non_upper_case_globals)]
pub const Default: Symbol = Symbol::new(171);

#[allow(non_upper_case_globals)]
pub const Eof: Symbol = Symbol::new(172);

#[allow(non_upper_case_globals)]
pub const Epp: Symbol = Symbol::new(173);

#[allow(non_upper_case_globals)]
pub const FieldType: Symbol = Symbol::new(174);

#[allow(non_upper_case_globals)]
pub const Filter: Symbol = Symbol::new(175);

#[allow(non_upper_case_globals)]
pub const Generate: Symbol = Symbol::new(176);

#[allow(non_upper_case_globals)]
pub const Lc: Symbol = Symbol::new(177);

#[allow(non_upper_case_globals)]
pub const Map: Symbol = Symbol::new(178);

#[allow(non_upper_case_globals)]
pub const MapFieldAssoc: Symbol = Symbol::new(179);

#[allow(non_upper_case_globals)]
pub const MapFieldExact: Symbol = Symbol::new(180);

#[allow(non_upper_case_globals)]
pub const Match: Symbol = Symbol::new(181);

#[allow(non_upper_case_globals)]
pub const NamedFun: Symbol = Symbol::new(182);

#[allow(non_upper_case_globals)]
pub const Nil: Symbol = Symbol::new(183);

#[allow(non_upper_case_globals)]
pub const Op: Symbol = Symbol::new(184);

#[allow(non_upper_case_globals)]
pub const OptionalCallbacks: Symbol = Symbol::new(185);

#[allow(non_upper_case_globals)]
pub const Product: Symbol = Symbol::new(186);

#[allow(non_upper_case_globals)]
pub const Range: Symbol = Symbol::new(187);

#[allow(non_upper_case_globals)]
pub const Record: Symbol = Symbol::new(188);

#[allow(non_upper_case_globals)]
pub const RecordField: Symbol = Symbol::new(189);

#[allow(non_upper_case_globals)]
pub const RecordIndex: Symbol = Symbol::new(190);

#[allow(non_upper_case_globals)]
pub const Remote: Symbol = Symbol::new(191);

#[allow(non_upper_case_globals)]
pub const RemoteType: Symbol = Symbol::new(192);

#[allow(non_upper_case_globals)]
pub const String: Symbol = Symbol::new(193);

#[allow(non_upper_case_globals)]
pub const Tuple: Symbol = Symbol::new(194);

#[allow(non_upper_case_globals)]
pub const TypedRecordField: Symbol = Symbol::new(195);

#[allow(non_upper_case_globals)]
pub const Union: Symbol = Symbol::new(196);

#[allow(non_upper_case_globals)]
pub const UserType: Symbol = Symbol::new(197);

#[allow(non_upper_case_globals)]
pub const Var: Symbol = Symbol::new(198);

#[allow(non_upper_case_globals)]
pub const EXIT: Symbol = Symbol::new(199);

#[allow(non_upper_case_globals)]
pub const MODULE: Symbol = Symbol::new(200);

#[allow(non_upper_case_globals)]
pub const MODULE_STRING: Symbol = Symbol::new(201);

#[allow(non_upper_case_globals)]
pub const All: Symbol = Symbol::new(202);

#[allow(non_upper_case_globals)]
pub const Any: Symbol = Symbol::new(203);

#[allow(non_upper_case_globals)]
pub const Attributes: Symbol = Symbol::new(204);

#[allow(non_upper_case_globals)]
pub const BehaviourInfo: Symbol = Symbol::new(205);

#[allow(non_upper_case_globals)]
pub const Bits: Symbol = Symbol::new(206);

#[allow(non_upper_case_globals)]
pub const BitsCloseWritable: Symbol = Symbol::new(207);

#[allow(non_upper_case_globals)]
pub const BitsInitWritable: Symbol = Symbol::new(208);

#[allow(non_upper_case_globals)]
pub const Bitstring: Symbol = Symbol::new(209);

#[allow(non_upper_case_globals)]
pub const Bytes: Symbol = Symbol::new(210);

#[allow(non_upper_case_globals)]
pub const Erlang: Symbol = Symbol::new(211);

#[allow(non_upper_case_globals)]
pub const Exit: Symbol = Symbol::new(212);

#[allow(non_upper_case_globals)]
pub const Exports: Symbol = Symbol::new(213);

#[allow(non_upper_case_globals)]
pub const Function: Symbol = Symbol::new(214);

#[allow(non_upper_case_globals)]
pub const Functions: Symbol = Symbol::new(215);

#[allow(non_upper_case_globals)]
pub const Infinity: Symbol = Symbol::new(216);

#[allow(non_upper_case_globals)]
pub const Inline: Symbol = Symbol::new(217);

#[allow(non_upper_case_globals)]
pub const Inlined: Symbol = Symbol::new(218);

#[allow(non_upper_case_globals)]
pub const Integer: Symbol = Symbol::new(219);

#[allow(non_upper_case_globals)]
pub const LetrecGoto: Symbol = Symbol::new(220);

#[allow(non_upper_case_globals)]
pub const LetrecName: Symbol = Symbol::new(221);

#[allow(non_upper_case_globals)]
pub const ListComprehension: Symbol = Symbol::new(222);

#[allow(non_upper_case_globals)]
pub const Md5: Symbol = Symbol::new(223);

#[allow(non_upper_case_globals)]
pub const ModuleInfo: Symbol = Symbol::new(224);

#[allow(non_upper_case_globals)]
pub const Native: Symbol = Symbol::new(225);

#[allow(non_upper_case_globals)]
pub const New: Symbol = Symbol::new(226);

#[allow(non_upper_case_globals)]
pub const Nif: Symbol = Symbol::new(227);

#[allow(non_upper_case_globals)]
pub const NifStart: Symbol = Symbol::new(228);

#[allow(non_upper_case_globals)]
pub const NoInline: Symbol = Symbol::new(229);

#[allow(non_upper_case_globals)]
pub const Ok: Symbol = Symbol::new(230);

#[allow(non_upper_case_globals)]
pub const Other: Symbol = Symbol::new(231);

#[allow(non_upper_case_globals)]
pub const ReceiveTimeout: Symbol = Symbol::new(232);

#[allow(non_upper_case_globals)]
pub const RecordInfo: Symbol = Symbol::new(233);

#[allow(non_upper_case_globals)]
pub const RecvNext: Symbol = Symbol::new(234);

#[allow(non_upper_case_globals)]
pub const RecvPeek: Symbol = Symbol::new(235);

#[allow(non_upper_case_globals)]
pub const RecvPop: Symbol = Symbol::new(236);

#[allow(non_upper_case_globals)]
pub const RecvStart: Symbol = Symbol::new(237);

#[allow(non_upper_case_globals)]
pub const RecvWait: Symbol = Symbol::new(238);

#[allow(non_upper_case_globals)]
pub const Send: Symbol = Symbol::new(239);

#[allow(non_upper_case_globals)]
pub const SingleUse: Symbol = Symbol::new(240);

#[allow(non_upper_case_globals)]
pub const SkipClause: Symbol = Symbol::new(241);

#[allow(non_upper_case_globals)]
pub const Undefined: Symbol = Symbol::new(242);

#[allow(non_upper_case_globals)]
pub const Unused: Symbol = Symbol::new(243);

#[allow(non_upper_case_globals)]
pub const Used: Symbol = Symbol::new(244);

#[allow(non_upper_case_globals)]
pub const Utf16: Symbol = Symbol::new(245);

#[allow(non_upper_case_globals)]
pub const Utf32: Symbol = Symbol::new(246);

#[allow(non_upper_case_globals)]
pub const Utf8: Symbol = Symbol::new(247);

#[allow(non_upper_case_globals)]
pub const NifBsFinish: Symbol = Symbol::new(248);

#[allow(non_upper_case_globals)]
pub const NifBsInit: Symbol = Symbol::new(249);

#[allow(non_upper_case_globals)]
pub const NifBuildStacktrace: Symbol = Symbol::new(250);

#[allow(non_upper_case_globals)]
pub const NifMakeTuple: Symbol = Symbol::new(251);

#[allow(non_upper_case_globals)]
pub const NifMapEmpty: Symbol = Symbol::new(252);

#[allow(non_upper_case_globals)]
pub const NifMapFetch: Symbol = Symbol::new(253);

#[allow(non_upper_case_globals)]
pub const NifMapPut: Symbol = Symbol::new(254);

#[allow(non_upper_case_globals)]
pub const NifMapPutMut: Symbol = Symbol::new(255);

#[allow(non_upper_case_globals)]
pub const NifMapUpdate: Symbol = Symbol::new(256);

#[allow(non_upper_case_globals)]
pub const NifMapUpdateMut: Symbol = Symbol::new(257);

#[allow(non_upper_case_globals)]
pub const NifTupleSize: Symbol = Symbol::new(258);


pub(crate) const __SYMBOLS: &'static [(Symbol, &'static str)] = &[
  (False, "false"),
  (True, "true"),
  (Empty, ""),
  (After, "after"),
  (And, "and"),
  (AndAlso, "andalso"),
  (Band, "band"),
  (Begin, "begin"),
  (Bnot, "bnot"),
  (Bor, "bor"),
  (Bsl, "bsl"),
  (Bsr, "bsr"),
  (Bxor, "bxor"),
  (Case, "case"),
  (Catch, "catch"),
  (Div, "div"),
  (End, "end"),
  (Fun, "fun"),
  (If, "if"),
  (Not, "not"),
  (Of, "of"),
  (Or, "or"),
  (OrElse, "orelse"),
  (Receive, "receive"),
  (Rem, "rem"),
  (Try, "try"),
  (When, "when"),
  (Xor, "xor"),
  (Author, "author"),
  (Behaviour, "behaviour"),
  (Callback, "callback"),
  (Compile, "compile"),
  (Deprecated, "deprecated"),
  (Export, "export"),
  (ExportType, "export_type"),
  (Import, "import"),
  (Module, "module"),
  (Nifs, "nifs"),
  (OnLoad, "on_load"),
  (Opaque, "opaque"),
  (Spec, "spec"),
  (Type, "type"),
  (Vsn, "vsn"),
  (Define, "define"),
  (Elif, "elif"),
  (Else, "else"),
  (Endif, "endif"),
  (Error, "error"),
  (File, "file"),
  (Ifdef, "ifdef"),
  (Ifndef, "ifndef"),
  (Include, "include"),
  (IncludeLib, "include_lib"),
  (Line, "line"),
  (Undef, "undef"),
  (Warning, "warning"),
  (COMPILER_VSN, "COMPILER_VSN"),
  (VSN, "VSN"),
  (Bang, "!"),
  (Star, "*"),
  (Plus, "+"),
  (PlusPlus, "++"),
  (Minus, "-"),
  (MinusMinus, "--"),
  (Slash, "/"),
  (NotEqual, "/="),
  (Lt, "<"),
  (NotEqualStrict, "=/="),
  (EqualStrict, "=:="),
  (Lte, "=<"),
  (Equal, "=="),
  (Gt, ">"),
  (Gte, ">="),
  (Underscore, "_"),
  (BadFilter, "bad_filter"),
  (BadGenerator, "bad_generator"),
  (BadSize, "bad_size"),
  (BadValue, "bad_value"),
  (Badarg, "badarg"),
  (Badmap, "badmap"),
  (Badmatch, "badmatch"),
  (Badrecord, "badrecord"),
  (CaseClause, "case_clause"),
  (FunctionClause, "function_clause"),
  (IfClause, "if_clause"),
  (NifError, "nif_error"),
  (TryClause, "try_clause"),
  (IsAtom, "is_atom"),
  (IsBinary, "is_binary"),
  (IsBitstring, "is_bitstring"),
  (IsBoolean, "is_boolean"),
  (IsFloat, "is_float"),
  (IsFunction, "is_function"),
  (IsInteger, "is_integer"),
  (IsList, "is_list"),
  (IsMap, "is_map"),
  (IsNumber, "is_number"),
  (IsPid, "is_pid"),
  (IsPort, "is_port"),
  (IsRecord, "is_record"),
  (IsReference, "is_reference"),
  (IsTuple, "is_tuple"),
  (Abs, "abs"),
  (Apply, "apply"),
  (BinaryPart, "binary_part"),
  (BitSize, "bit_size"),
  (BuildStacktrace, "build_stacktrace"),
  (ByteSize, "byte_size"),
  (Ceil, "ceil"),
  (Date, "date"),
  (Element, "element"),
  (Float, "float"),
  (Floor, "floor"),
  (Get, "get"),
  (GetCookie, "get_cookie"),
  (GetKeys, "get_keys"),
  (GroupLeader, "group_leader"),
  (Hd, "hd"),
  (IsAlive, "is_alive"),
  (IsMapKey, "is_map_key"),
  (Length, "length"),
  (MakeFun, "make_fun"),
  (MakeRef, "make_ref"),
  (MapGet, "map_get"),
  (MapSize, "map_size"),
  (MatchFail, "match_fail"),
  (Max, "max"),
  (Min, "min"),
  (Node, "node"),
  (Nodes, "nodes"),
  (Ports, "ports"),
  (PreLoaded, "pre_loaded"),
  (Processes, "processes"),
  (Raise, "raise"),
  (RawRaise, "raw_raise"),
  (RecvPeekMessage, "recv_peek_message"),
  (RecvWaitTimeout, "recv_wait_timeout"),
  (Registered, "registered"),
  (RemoveMessage, "remove_message"),
  (Round, "round"),
  (SELF, "self"),
  (Setelement, "setelement"),
  (Size, "size"),
  (TermToBinary, "term_to_binary"),
  (Throw, "throw"),
  (Time, "time"),
  (Tl, "tl"),
  (Trunc, "trunc"),
  (TupleSize, "tuple_size"),
  (UnpackEnv, "unpack_env"),
  (Closure, "closure"),
  (CompilerGenerated, "compiler_generated"),
  (Id, "id"),
  (RawStack, "raw_stack"),
  (MaybeExpr, "maybe_expr"),
  (AnnType, "ann_type"),
  (Atom, "atom"),
  (Attribute, "attribute"),
  (Bc, "bc"),
  (BcGenerate, "bc_generate"),
  (Behavior, "behavior"),
  (Bin, "bin"),
  (BinElement, "bin_element"),
  (Binary, "binary"),
  (Block, "block"),
  (BoundedFun, "bounded_fun"),
  (Call, "call"),
  (Char, "char"),
  (Clause, "clause"),
  (Cons, "cons"),
  (Constraint, "constraint"),
  (Default, "default"),
  (Eof, "eof"),
  (Epp, "epp"),
  (FieldType, "field_type"),
  (Filter, "filter"),
  (Generate, "generate"),
  (Lc, "lc"),
  (Map, "map"),
  (MapFieldAssoc, "map_field_assoc"),
  (MapFieldExact, "map_field_exact"),
  (Match, "match"),
  (NamedFun, "named_fun"),
  (Nil, "nil"),
  (Op, "op"),
  (OptionalCallbacks, "optional_callbacks"),
  (Product, "product"),
  (Range, "range"),
  (Record, "record"),
  (RecordField, "record_field"),
  (RecordIndex, "record_index"),
  (Remote, "remote"),
  (RemoteType, "remote_type"),
  (String, "string"),
  (Tuple, "tuple"),
  (TypedRecordField, "typed_record_field"),
  (Union, "union"),
  (UserType, "user_type"),
  (Var, "var"),
  (EXIT, "EXIT"),
  (MODULE, "MODULE"),
  (MODULE_STRING, "MODULE_STRING"),
  (All, "all"),
  (Any, "any"),
  (Attributes, "attributes"),
  (BehaviourInfo, "behaviour_info"),
  (Bits, "bits"),
  (BitsCloseWritable, "bits_close_writable"),
  (BitsInitWritable, "bits_init_writable"),
  (Bitstring, "bitstring"),
  (Bytes, "bytes"),
  (Erlang, "erlang"),
  (Exit, "exit"),
  (Exports, "exports"),
  (Function, "function"),
  (Functions, "functions"),
  (Infinity, "infinity"),
  (Inline, "inline"),
  (Inlined, "inlined"),
  (Integer, "integer"),
  (LetrecGoto, "letrec_goto"),
  (LetrecName, "letrec_name"),
  (ListComprehension, "list_comprehension"),
  (Md5, "md5"),
  (ModuleInfo, "module_info"),
  (Native, "native"),
  (New, "new"),
  (Nif, "nif"),
  (NifStart, "nif_start"),
  (NoInline, "no_inline"),
  (Ok, "ok"),
  (Other, "other"),
  (ReceiveTimeout, "receive_timeout"),
  (RecordInfo, "record_info"),
  (RecvNext, "recv_next"),
  (RecvPeek, "recv_peek"),
  (RecvPop, "recv_pop"),
  (RecvStart, "recv_start"),
  (RecvWait, "recv_wait"),
  (Send, "send"),
  (SingleUse, "single_use"),
  (SkipClause, "skip_clause"),
  (Undefined, "undefined"),
  (Unused, "unused"),
  (Used, "used"),
  (Utf16, "utf16"),
  (Utf32, "utf32"),
  (Utf8, "utf8"),
  (NifBsFinish, "__firefly_bs_finish"),
  (NifBsInit, "__firefly_bs_init"),
  (NifBuildStacktrace, "__firefly_build_stacktrace"),
  (NifMakeTuple, "__firefly_make_tuple"),
  (NifMapEmpty, "__firefly_map_empty"),
  (NifMapFetch, "__firefly_map_fetch"),
  (NifMapPut, "__firefly_map_put"),
  (NifMapPutMut, "__firefly_map_put_mut"),
  (NifMapUpdate, "__firefly_map_update"),
  (NifMapUpdateMut, "__firefly_map_update_mut"),
  (NifTupleSize, "__firefly_tuple_size"),
];

pub fn is_keyword(sym: Symbol) -> bool {
    match sym {
        self::After => true,
        self::And => true,
        self::AndAlso => true,
        self::Band => true,
        self::Begin => true,
        self::Bnot => true,
        self::Bor => true,
        self::Bsl => true,
        self::Bsr => true,
        self::Bxor => true,
        self::Case => true,
        self::Catch => true,
        self::Div => true,
        self::End => true,
        self::Fun => true,
        self::If => true,
        self::Not => true,
        self::Of => true,
        self::Or => true,
        self::OrElse => true,
        self::Receive => true,
        self::Rem => true,
        self::Try => true,
        self::When => true,
        self::Xor => true,
        _ => false,
    }
}

pub fn is_reserved(sym: Symbol) -> bool {
    match sym {
        self::Author => true,
        self::Behaviour => true,
        self::Callback => true,
        self::Compile => true,
        self::Deprecated => true,
        self::Export => true,
        self::ExportType => true,
        self::Import => true,
        self::Module => true,
        self::Nifs => true,
        self::OnLoad => true,
        self::Opaque => true,
        self::Spec => true,
        self::Type => true,
        self::Vsn => true,
        self::Define => true,
        self::Elif => true,
        self::Else => true,
        self::Endif => true,
        self::Error => true,
        self::File => true,
        self::Ifdef => true,
        self::Ifndef => true,
        self::Include => true,
        self::IncludeLib => true,
        self::Line => true,
        self::Undef => true,
        self::Warning => true,
        _ => false,
    }
}

pub fn is_directive(sym: Symbol) -> bool {
    match sym {
        self::Define => true,
        self::Elif => true,
        self::Else => true,
        self::Endif => true,
        self::Error => true,
        self::File => true,
        self::Ifdef => true,
        self::Ifndef => true,
        self::Include => true,
        self::IncludeLib => true,
        self::Line => true,
        self::Undef => true,
        self::Warning => true,
        _ => false,
    }
}

