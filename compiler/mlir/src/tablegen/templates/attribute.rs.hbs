#[repr(transparent)]
#[derive(Copy, Clone)]
pub struct {{name}}(::liblumen_mlir::ir::Attribute);
impl {{name}} {
    #[inline]
    pub fn get(
        context: ::liblumen_mlir::ir::MlirContext,
        {{#if is_variadic_type(returnType)}}
          value: &[{{to_rust_type(returnType)}}]
        {{else}}
          value:{{to_rust_type(returnType)}},
        {{/if}}
    ) -> Self {
        {{#if is_variadic_type(returnType)}}
          unsafe { mlir_{{to_snake_case(dialect.name)}}_get_{{to_snake_case(name)}}(context, value.as_ptr(), value.len()) }
        {{else}}
          unsafe { mlir_{{to_snake_case(dialect.name)}}_get_{{to_snake_case(name)}}(context, value) }
        {{/if}}
    }
}
impl ::std::ops::Deref for {{name}} {
    type Target = ::liblumen_mlir::ir::Attribute;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl ::std::convert::TryFrom<::liblumen_mlir::ir::Attribute> for {{name}} {
    type Error = ();
    #[inline]
    pub fn try_from(attr: ::liblumen_mlir::ir::Attribute) -> Result<Self, Self::Error> {
        if unsafe { mlir_{{to_snake_case(dialect.name)}}_isa_{{to_snake_case(name)}}(attr) } {
            Ok(Self(attr))
        } else {
            Err(())
        }
    }
}
impl Into<::liblumen_mlir::ir::Attribute> for {{name}} {
    #[inline(always)]
    fn into(self) -> ::liblumen_mlir::ir::Attribute {
       self.0
    }
}
impl ::std::fmt::Debug for {{name}} {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{{name}}({:?})", &self.0)
    }
}
impl ::std::fmt::Display for {{name}} {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}", &self.0)
    }
}

impl<'a> {{dialect.builder_name}}<'a> {
    #[inline]
    pub fn get_{{to_snake_case(name)}}(&self,
      {{#if is_variadic_type(returnType)}}
        value: &[{{to_rust_type(returnType)}}]
      {{else}}
        value: {{to_rust_type(returnType)}}
      {{/if}}
      ) -> {{name}} {
      {{name}}::get(self.context, value)
    }
}

extern "C" {
    #[link_name = "mlir{{to_pascal_case(dialect.name)}}{{name}}Get"]
    fn mlir_{{to_snake_case(dialect.name)}}_get_{{to_snake_case(name)}}(context: ::liblumen_mlir::ir::MlirContext, value: {{to_rust_type(returnType)}}) -> {{name}};
    #[link_name = "mlir{{to_pascal_case(dialect.name)}}{{name}}IsA"]
    fn mlir_{{to_snake_case(dialect.name)}}_isa_{{to_snake_case(name)}}(attr: ::liblumen_mlir::ir::Attribute) -> bool;
}
