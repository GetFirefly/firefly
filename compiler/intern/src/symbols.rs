///! AUTOGENERATED by build.rs - do not modify this file
use crate::Symbol;
#[allow(non_upper_case_globals)]
pub const False: Symbol = Symbol::new(0);

#[allow(non_upper_case_globals)]
pub const True: Symbol = Symbol::new(1);

#[allow(non_upper_case_globals)]
pub const Empty: Symbol = Symbol::new(2);

#[allow(non_upper_case_globals)]
pub const After: Symbol = Symbol::new(3);

#[allow(non_upper_case_globals)]
pub const And: Symbol = Symbol::new(4);

#[allow(non_upper_case_globals)]
pub const AndAlso: Symbol = Symbol::new(5);

#[allow(non_upper_case_globals)]
pub const Band: Symbol = Symbol::new(6);

#[allow(non_upper_case_globals)]
pub const Begin: Symbol = Symbol::new(7);

#[allow(non_upper_case_globals)]
pub const Bnot: Symbol = Symbol::new(8);

#[allow(non_upper_case_globals)]
pub const Bor: Symbol = Symbol::new(9);

#[allow(non_upper_case_globals)]
pub const Bsl: Symbol = Symbol::new(10);

#[allow(non_upper_case_globals)]
pub const Bsr: Symbol = Symbol::new(11);

#[allow(non_upper_case_globals)]
pub const Bxor: Symbol = Symbol::new(12);

#[allow(non_upper_case_globals)]
pub const Case: Symbol = Symbol::new(13);

#[allow(non_upper_case_globals)]
pub const Catch: Symbol = Symbol::new(14);

#[allow(non_upper_case_globals)]
pub const Div: Symbol = Symbol::new(15);

#[allow(non_upper_case_globals)]
pub const End: Symbol = Symbol::new(16);

#[allow(non_upper_case_globals)]
pub const Fun: Symbol = Symbol::new(17);

#[allow(non_upper_case_globals)]
pub const If: Symbol = Symbol::new(18);

#[allow(non_upper_case_globals)]
pub const Not: Symbol = Symbol::new(19);

#[allow(non_upper_case_globals)]
pub const Of: Symbol = Symbol::new(20);

#[allow(non_upper_case_globals)]
pub const Or: Symbol = Symbol::new(21);

#[allow(non_upper_case_globals)]
pub const OrElse: Symbol = Symbol::new(22);

#[allow(non_upper_case_globals)]
pub const Receive: Symbol = Symbol::new(23);

#[allow(non_upper_case_globals)]
pub const Rem: Symbol = Symbol::new(24);

#[allow(non_upper_case_globals)]
pub const Try: Symbol = Symbol::new(25);

#[allow(non_upper_case_globals)]
pub const When: Symbol = Symbol::new(26);

#[allow(non_upper_case_globals)]
pub const Xor: Symbol = Symbol::new(27);

#[allow(non_upper_case_globals)]
pub const Behaviour: Symbol = Symbol::new(28);

#[allow(non_upper_case_globals)]
pub const Callback: Symbol = Symbol::new(29);

#[allow(non_upper_case_globals)]
pub const Compile: Symbol = Symbol::new(30);

#[allow(non_upper_case_globals)]
pub const Deprecated: Symbol = Symbol::new(31);

#[allow(non_upper_case_globals)]
pub const Export: Symbol = Symbol::new(32);

#[allow(non_upper_case_globals)]
pub const Import: Symbol = Symbol::new(33);

#[allow(non_upper_case_globals)]
pub const Module: Symbol = Symbol::new(34);

#[allow(non_upper_case_globals)]
pub const Nifs: Symbol = Symbol::new(35);

#[allow(non_upper_case_globals)]
pub const OnLoad: Symbol = Symbol::new(36);

#[allow(non_upper_case_globals)]
pub const Spec: Symbol = Symbol::new(37);

#[allow(non_upper_case_globals)]
pub const Vsn: Symbol = Symbol::new(38);

#[allow(non_upper_case_globals)]
pub const Define: Symbol = Symbol::new(39);

#[allow(non_upper_case_globals)]
pub const Elif: Symbol = Symbol::new(40);

#[allow(non_upper_case_globals)]
pub const Else: Symbol = Symbol::new(41);

#[allow(non_upper_case_globals)]
pub const Endif: Symbol = Symbol::new(42);

#[allow(non_upper_case_globals)]
pub const Error: Symbol = Symbol::new(43);

#[allow(non_upper_case_globals)]
pub const File: Symbol = Symbol::new(44);

#[allow(non_upper_case_globals)]
pub const Ifdef: Symbol = Symbol::new(45);

#[allow(non_upper_case_globals)]
pub const Ifndef: Symbol = Symbol::new(46);

#[allow(non_upper_case_globals)]
pub const Include: Symbol = Symbol::new(47);

#[allow(non_upper_case_globals)]
pub const IncludeLib: Symbol = Symbol::new(48);

#[allow(non_upper_case_globals)]
pub const Line: Symbol = Symbol::new(49);

#[allow(non_upper_case_globals)]
pub const Undef: Symbol = Symbol::new(50);

#[allow(non_upper_case_globals)]
pub const Warning: Symbol = Symbol::new(51);

#[allow(non_upper_case_globals)]
pub const Bang: Symbol = Symbol::new(52);

#[allow(non_upper_case_globals)]
pub const Star: Symbol = Symbol::new(53);

#[allow(non_upper_case_globals)]
pub const Plus: Symbol = Symbol::new(54);

#[allow(non_upper_case_globals)]
pub const PlusPlus: Symbol = Symbol::new(55);

#[allow(non_upper_case_globals)]
pub const Minus: Symbol = Symbol::new(56);

#[allow(non_upper_case_globals)]
pub const MinusMinus: Symbol = Symbol::new(57);

#[allow(non_upper_case_globals)]
pub const Slash: Symbol = Symbol::new(58);

#[allow(non_upper_case_globals)]
pub const NotEqual: Symbol = Symbol::new(59);

#[allow(non_upper_case_globals)]
pub const Lt: Symbol = Symbol::new(60);

#[allow(non_upper_case_globals)]
pub const NotEqualStrict: Symbol = Symbol::new(61);

#[allow(non_upper_case_globals)]
pub const EqualStrict: Symbol = Symbol::new(62);

#[allow(non_upper_case_globals)]
pub const Lte: Symbol = Symbol::new(63);

#[allow(non_upper_case_globals)]
pub const Equal: Symbol = Symbol::new(64);

#[allow(non_upper_case_globals)]
pub const Gt: Symbol = Symbol::new(65);

#[allow(non_upper_case_globals)]
pub const Gte: Symbol = Symbol::new(66);

#[allow(non_upper_case_globals)]
pub const Underscore: Symbol = Symbol::new(67);

#[allow(non_upper_case_globals)]
pub const Badarg: Symbol = Symbol::new(68);

#[allow(non_upper_case_globals)]
pub const Badmap: Symbol = Symbol::new(69);

#[allow(non_upper_case_globals)]
pub const Badmatch: Symbol = Symbol::new(70);

#[allow(non_upper_case_globals)]
pub const Badrecord: Symbol = Symbol::new(71);

#[allow(non_upper_case_globals)]
pub const CaseClause: Symbol = Symbol::new(72);

#[allow(non_upper_case_globals)]
pub const FunctionClause: Symbol = Symbol::new(73);

#[allow(non_upper_case_globals)]
pub const IfClause: Symbol = Symbol::new(74);

#[allow(non_upper_case_globals)]
pub const NifError: Symbol = Symbol::new(75);

#[allow(non_upper_case_globals)]
pub const TryClause: Symbol = Symbol::new(76);

#[allow(non_upper_case_globals)]
pub const IsAtom: Symbol = Symbol::new(77);

#[allow(non_upper_case_globals)]
pub const IsBinary: Symbol = Symbol::new(78);

#[allow(non_upper_case_globals)]
pub const IsBitstring: Symbol = Symbol::new(79);

#[allow(non_upper_case_globals)]
pub const IsBoolean: Symbol = Symbol::new(80);

#[allow(non_upper_case_globals)]
pub const IsFloat: Symbol = Symbol::new(81);

#[allow(non_upper_case_globals)]
pub const IsFunction: Symbol = Symbol::new(82);

#[allow(non_upper_case_globals)]
pub const IsInteger: Symbol = Symbol::new(83);

#[allow(non_upper_case_globals)]
pub const IsList: Symbol = Symbol::new(84);

#[allow(non_upper_case_globals)]
pub const IsMap: Symbol = Symbol::new(85);

#[allow(non_upper_case_globals)]
pub const IsNumber: Symbol = Symbol::new(86);

#[allow(non_upper_case_globals)]
pub const IsPid: Symbol = Symbol::new(87);

#[allow(non_upper_case_globals)]
pub const IsPort: Symbol = Symbol::new(88);

#[allow(non_upper_case_globals)]
pub const IsRecord: Symbol = Symbol::new(89);

#[allow(non_upper_case_globals)]
pub const IsReference: Symbol = Symbol::new(90);

#[allow(non_upper_case_globals)]
pub const IsTuple: Symbol = Symbol::new(91);

#[allow(non_upper_case_globals)]
pub const Abs: Symbol = Symbol::new(92);

#[allow(non_upper_case_globals)]
pub const Apply: Symbol = Symbol::new(93);

#[allow(non_upper_case_globals)]
pub const BinaryPart: Symbol = Symbol::new(94);

#[allow(non_upper_case_globals)]
pub const BitSize: Symbol = Symbol::new(95);

#[allow(non_upper_case_globals)]
pub const BuildStacktrace: Symbol = Symbol::new(96);

#[allow(non_upper_case_globals)]
pub const ByteSize: Symbol = Symbol::new(97);

#[allow(non_upper_case_globals)]
pub const Ceil: Symbol = Symbol::new(98);

#[allow(non_upper_case_globals)]
pub const Element: Symbol = Symbol::new(99);

#[allow(non_upper_case_globals)]
pub const Float: Symbol = Symbol::new(100);

#[allow(non_upper_case_globals)]
pub const Floor: Symbol = Symbol::new(101);

#[allow(non_upper_case_globals)]
pub const Hd: Symbol = Symbol::new(102);

#[allow(non_upper_case_globals)]
pub const IsMapKey: Symbol = Symbol::new(103);

#[allow(non_upper_case_globals)]
pub const Length: Symbol = Symbol::new(104);

#[allow(non_upper_case_globals)]
pub const MakeFun: Symbol = Symbol::new(105);

#[allow(non_upper_case_globals)]
pub const MapGet: Symbol = Symbol::new(106);

#[allow(non_upper_case_globals)]
pub const MapSize: Symbol = Symbol::new(107);

#[allow(non_upper_case_globals)]
pub const MatchFail: Symbol = Symbol::new(108);

#[allow(non_upper_case_globals)]
pub const Node: Symbol = Symbol::new(109);

#[allow(non_upper_case_globals)]
pub const Raise: Symbol = Symbol::new(110);

#[allow(non_upper_case_globals)]
pub const Round: Symbol = Symbol::new(111);

#[allow(non_upper_case_globals)]
pub const SELF: Symbol = Symbol::new(112);

#[allow(non_upper_case_globals)]
pub const Setelement: Symbol = Symbol::new(113);

#[allow(non_upper_case_globals)]
pub const Size: Symbol = Symbol::new(114);

#[allow(non_upper_case_globals)]
pub const Throw: Symbol = Symbol::new(115);

#[allow(non_upper_case_globals)]
pub const Tl: Symbol = Symbol::new(116);

#[allow(non_upper_case_globals)]
pub const Trunc: Symbol = Symbol::new(117);

#[allow(non_upper_case_globals)]
pub const TupleSize: Symbol = Symbol::new(118);

#[allow(non_upper_case_globals)]
pub const CompilerGenerated: Symbol = Symbol::new(119);

#[allow(non_upper_case_globals)]
pub const Id: Symbol = Symbol::new(120);

#[allow(non_upper_case_globals)]
pub const EXIT: Symbol = Symbol::new(121);

#[allow(non_upper_case_globals)]
pub const MODULE: Symbol = Symbol::new(122);

#[allow(non_upper_case_globals)]
pub const MODULE_STRING: Symbol = Symbol::new(123);

#[allow(non_upper_case_globals)]
pub const All: Symbol = Symbol::new(124);

#[allow(non_upper_case_globals)]
pub const Attributes: Symbol = Symbol::new(125);

#[allow(non_upper_case_globals)]
pub const BehaviourInfo: Symbol = Symbol::new(126);

#[allow(non_upper_case_globals)]
pub const Bits: Symbol = Symbol::new(127);

#[allow(non_upper_case_globals)]
pub const Bitstring: Symbol = Symbol::new(128);

#[allow(non_upper_case_globals)]
pub const Bytes: Symbol = Symbol::new(129);

#[allow(non_upper_case_globals)]
pub const Erlang: Symbol = Symbol::new(130);

#[allow(non_upper_case_globals)]
pub const Exit: Symbol = Symbol::new(131);

#[allow(non_upper_case_globals)]
pub const Exports: Symbol = Symbol::new(132);

#[allow(non_upper_case_globals)]
pub const Integer: Symbol = Symbol::new(133);

#[allow(non_upper_case_globals)]
pub const ModuleInfo: Symbol = Symbol::new(134);

#[allow(non_upper_case_globals)]
pub const Native: Symbol = Symbol::new(135);

#[allow(non_upper_case_globals)]
pub const New: Symbol = Symbol::new(136);

#[allow(non_upper_case_globals)]
pub const RecordInfo: Symbol = Symbol::new(137);

#[allow(non_upper_case_globals)]
pub const Send: Symbol = Symbol::new(138);

#[allow(non_upper_case_globals)]
pub const Undefined: Symbol = Symbol::new(139);

#[allow(non_upper_case_globals)]
pub const Used: Symbol = Symbol::new(140);

#[allow(non_upper_case_globals)]
pub const Utf16: Symbol = Symbol::new(141);

#[allow(non_upper_case_globals)]
pub const Utf32: Symbol = Symbol::new(142);

#[allow(non_upper_case_globals)]
pub const Utf8: Symbol = Symbol::new(143);


pub(crate) const __SYMBOLS: &'static [(Symbol, &'static str)] = &[
  (False, "false"),
  (True, "true"),
  (Empty, ""),
  (After, "after"),
  (And, "and"),
  (AndAlso, "andalso"),
  (Band, "band"),
  (Begin, "begin"),
  (Bnot, "bnot"),
  (Bor, "bor"),
  (Bsl, "bsl"),
  (Bsr, "bsr"),
  (Bxor, "bxor"),
  (Case, "case"),
  (Catch, "catch"),
  (Div, "div"),
  (End, "end"),
  (Fun, "fun"),
  (If, "if"),
  (Not, "not"),
  (Of, "of"),
  (Or, "or"),
  (OrElse, "orelse"),
  (Receive, "receive"),
  (Rem, "rem"),
  (Try, "try"),
  (When, "when"),
  (Xor, "xor"),
  (Behaviour, "behaviour"),
  (Callback, "callback"),
  (Compile, "compile"),
  (Deprecated, "deprecated"),
  (Export, "export"),
  (Import, "import"),
  (Module, "module"),
  (Nifs, "nifs"),
  (OnLoad, "on_load"),
  (Spec, "spec"),
  (Vsn, "vsn"),
  (Define, "define"),
  (Elif, "elif"),
  (Else, "else"),
  (Endif, "endif"),
  (Error, "error"),
  (File, "file"),
  (Ifdef, "ifdef"),
  (Ifndef, "ifndef"),
  (Include, "include"),
  (IncludeLib, "include_lib"),
  (Line, "line"),
  (Undef, "undef"),
  (Warning, "warning"),
  (Bang, "!"),
  (Star, "*"),
  (Plus, "+"),
  (PlusPlus, "++"),
  (Minus, "-"),
  (MinusMinus, "--"),
  (Slash, "/"),
  (NotEqual, "/="),
  (Lt, "<"),
  (NotEqualStrict, "=/="),
  (EqualStrict, "=:="),
  (Lte, "=<"),
  (Equal, "=="),
  (Gt, ">"),
  (Gte, ">="),
  (Underscore, "_"),
  (Badarg, "badarg"),
  (Badmap, "badmap"),
  (Badmatch, "badmatch"),
  (Badrecord, "badrecord"),
  (CaseClause, "case_clause"),
  (FunctionClause, "function_clause"),
  (IfClause, "if_clause"),
  (NifError, "nif_error"),
  (TryClause, "try_clause"),
  (IsAtom, "is_atom"),
  (IsBinary, "is_binary"),
  (IsBitstring, "is_bitstring"),
  (IsBoolean, "is_boolean"),
  (IsFloat, "is_float"),
  (IsFunction, "is_function"),
  (IsInteger, "is_integer"),
  (IsList, "is_list"),
  (IsMap, "is_map"),
  (IsNumber, "is_number"),
  (IsPid, "is_pid"),
  (IsPort, "is_port"),
  (IsRecord, "is_record"),
  (IsReference, "is_reference"),
  (IsTuple, "is_tuple"),
  (Abs, "abs"),
  (Apply, "apply"),
  (BinaryPart, "binary_part"),
  (BitSize, "bit_size"),
  (BuildStacktrace, "build_stacktrace"),
  (ByteSize, "byte_size"),
  (Ceil, "ceil"),
  (Element, "element"),
  (Float, "float"),
  (Floor, "floor"),
  (Hd, "hd"),
  (IsMapKey, "is_map_key"),
  (Length, "length"),
  (MakeFun, "make_fun"),
  (MapGet, "map_get"),
  (MapSize, "map_size"),
  (MatchFail, "match_fail"),
  (Node, "node"),
  (Raise, "raise"),
  (Round, "round"),
  (SELF, "self"),
  (Setelement, "setelement"),
  (Size, "size"),
  (Throw, "throw"),
  (Tl, "tl"),
  (Trunc, "trunc"),
  (TupleSize, "tuple_size"),
  (CompilerGenerated, "compiler_generated"),
  (Id, "id"),
  (EXIT, "EXIT"),
  (MODULE, "MODULE"),
  (MODULE_STRING, "MODULE_STRING"),
  (All, "all"),
  (Attributes, "attributes"),
  (BehaviourInfo, "behaviour_info"),
  (Bits, "bits"),
  (Bitstring, "bitstring"),
  (Bytes, "bytes"),
  (Erlang, "erlang"),
  (Exit, "exit"),
  (Exports, "exports"),
  (Integer, "integer"),
  (ModuleInfo, "module_info"),
  (Native, "native"),
  (New, "new"),
  (RecordInfo, "record_info"),
  (Send, "send"),
  (Undefined, "undefined"),
  (Used, "used"),
  (Utf16, "utf16"),
  (Utf32, "utf32"),
  (Utf8, "utf8"),
];

pub fn is_keyword(sym: Symbol) -> bool {
    match sym {
        self::After => true,
        self::And => true,
        self::AndAlso => true,
        self::Band => true,
        self::Begin => true,
        self::Bnot => true,
        self::Bor => true,
        self::Bsl => true,
        self::Bsr => true,
        self::Bxor => true,
        self::Case => true,
        self::Catch => true,
        self::Div => true,
        self::End => true,
        self::Fun => true,
        self::If => true,
        self::Not => true,
        self::Of => true,
        self::Or => true,
        self::OrElse => true,
        self::Receive => true,
        self::Rem => true,
        self::Try => true,
        self::When => true,
        self::Xor => true,
        _ => false,
    }
}

pub fn is_reserved(sym: Symbol) -> bool {
    match sym {
        self::Behaviour => true,
        self::Callback => true,
        self::Compile => true,
        self::Deprecated => true,
        self::Export => true,
        self::Import => true,
        self::Module => true,
        self::Nifs => true,
        self::OnLoad => true,
        self::Spec => true,
        self::Vsn => true,
        self::Define => true,
        self::Elif => true,
        self::Else => true,
        self::Endif => true,
        self::Error => true,
        self::File => true,
        self::Ifdef => true,
        self::Ifndef => true,
        self::Include => true,
        self::IncludeLib => true,
        self::Line => true,
        self::Undef => true,
        self::Warning => true,
        _ => false,
    }
}

pub fn is_directive(sym: Symbol) -> bool {
    match sym {
        self::Define => true,
        self::Elif => true,
        self::Else => true,
        self::Endif => true,
        self::Error => true,
        self::File => true,
        self::Ifdef => true,
        self::Ifndef => true,
        self::Include => true,
        self::IncludeLib => true,
        self::Line => true,
        self::Undef => true,
        self::Warning => true,
        _ => false,
    }
}

