use firefly_diagnostics::*;
use firefly_intern::{Symbol, Ident};
use firefly_number::{Integer, Float};
use firefly_syntax_erl::ast::*;

use crate::ast::*;
use super::Token;

grammar<'a>(reporter: &Reporter, codemap: &CodeMap, &mut current_file: Option<SourceId>);

// Comma-delimited with at least one element
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

// Comma-delimited with zero or more elements
CommaOpt<T>: Vec<T> = {
    <vals:(<T> ",")*> <last: T?> => {
        let mut vals = vals;
        vals.extend(last);
        vals
    },
};

List<T>: Vec<T> = {
    "[" <elements:CommaOpt<T>> "]" => elements
};

pub Root: Root = {
    <(<Item> ".")*> => {
        Root {
            items: <>,
        }
    },
};

pub Module: Module = {
    <l:@L> <(<TopLevel> ".")*> <r:@R> => {
        Module::new_with_pp(reporter, span!(l, r), body)
    },
};

TopLevel: TopLevel = {
    <FunctionDefinition>
        => TopLevel::Function(<>),
    <RecordDeclaration>
        => TopLevel::Record(<>),
    <AttributeDefinition>
        => TopLevel::Attribute(<>),
};


// Functions

FunctionDefinition: Function = {
    <l:@L> "{" "function" "," <_:linenum> "," <name:ident> "," <arity:arity> "," <clauses:List<FunctionClause>> "." <r:@R>
        =>? match Function::new(reporter, span!(l, r), clauses) {
                Ok(inner) => Ok(inner),
                Err(()) => Err(to_lalrpop_err!(())),
            },
};

FunctionClause: FunctionClause = {
    <l:@L> "{" "clause" "," <_:lineum> "," <params:List<Pattern>> "," <guards:List<Guard>> "," <body:List<Expr>> "}" <r:@R> => {
        FunctionClause::new(span!(l, r), Some(Name::Atom(a)), params, g, body)
    }
};

Guard: Guard = <l:@L> <conditions:Comma<Expr>> <r:@R>
    => Guard { span: span!(l, r), conditions };


// Attributes

AttributeDefinition: Attribute = {
    <l:@L> "{" "attribute" "," <_:linenum> "," "vsn" "," <vsn:Literal>  "}" <r:@R>
        => Attribute::Vsn(span!(l, r), vsn),
    <l:@L> "{" "attribute" "," <_:linenum> "," "author" "," <author:Literal>  "}" <r:@R>
        => Attribute::Author(span!(l, r), vsn),
    <l:@L> "{" "attribute" "," <_:linenum> "," "compile" "," <opts:Constant>  "}" <r:@R>
        => Attribute::Compile(span!(l, r), opts),
    <l:@L> "{" "attribute" "," <_:linenum> "," "import" "," "{" <module:atom> "," <imports:List<FunctionName>> "}" "}" <r:@R>
        => Attribute::Import(span!(l, r), imports),
    <l:@L> "{" "attribute" "," <_:linenum> "," "export" "," <exports:List<FunctionName>> "}" <r:@R>
        => Attribute::Export(span!(l, r), exports),
    <l:@L> "{" "attribute" "," <_:linenum> "," "export_type" "," <exports:List<FunctionName>> "}" <r:@R>
        => Attribute::ExportType(span!(l, r), exports),
    <l:@L> "{" "attribute" "," <_:linenum> "," "optional_callbacks" "," <optional:List<FunctionName>> "}" <r:@R>
        => Attribute::OptionalCallbacks(span!(l, r), optional),
    <l:@L> "{" "attribute" "," <_:linenum> "," "behaviour" "," <module:atom> "}" <r:@R>
        => Attribute::Behaviour(span!(l, r), module),
    <l:@L> "{" "attribute" "," <_:linenum> "," "on_load" "," <fun:FunctionName> "}" <r:@R>
        => Attribute::OnLoad(span!(l, r), fun),
    <l:@L> "{" "attribute" "," <_:linenum> "," "opaque" "," <typedef:TypeDef> "}" <r:@R> => {
        let mut typedef = typedef;
        typedef.span = span!(l, r);
        Attribute::Type(typedef),
    }
    <l:@L> "{" "attribute" "," <_:linenum> "," "type" "," <typedef:TypeDef> "}" <r:@R> => {
        let mut typedef = typedef;
        typedef.span = span!(l, r);
        Attribute::Type(typedef),
    }
    <l:@L> "{" "attribute" "," <_:linenum> "," "callback" "," "{" <name:FunctionName> "," <clauses:List<Type>> "}" "}" <r:@R>
        => Attribute::Import(span!(l, r), imports),
    <l:@L> "{" "attribute" "," <_:linenum> "," "spec" "," "{" <name:FunctionName> "," <clauses:List<Type>> "}" "}" <r:@R>
        => Attribute::Import(span!(l, r), imports),
    DeprecatedAttribute,
    RemovedAttribute,
    UserAttribute,
};

TypeDef: TypeDef = {
    <l:@L> "{" <name:atom> "," "{" "type" "," <_:linenum> "," <builtin:atom> "," <args:List<TypeArg> "}" "," <params:List<LiteralOrVar>>  "}" <r:@R> => {
        let ty = Type::from_type_constructor(builtin, args)
        TypeDef {
          span: span!(l, r),
          opaque: false,
          name,
          params,
          ty
        }
    },
    "{" <name:atom> "," "{" "user_type" "," <_:linenum> "," <user:atom> "," <args:List<TypeArg> "}" "," <vars:List<LiteralOrVar>>  "}" => {
        let ty = Type::from_type_constructor(builtin, args)
        TypeDef {
          span: span!(l, r),
          opaque: false,
          name,
          params,
          ty
        }
    }
};

TypeArg: Type = {
    TypeArg100,
};

TypeArg100: Type = {
    <l:@L> "{" "type" "," <_:linenum> "," <name:atom> "," <args:List<TypeArg> "}" <r:@R> => {
        Type::from_type_constructor(name, args)
    },
    <l:@L> "{" "user_type" "," <_:linenum> "," <name:atom> "," <args:List<TypeArg> "}" <r:@R> => {
        Type::from_type_constructor(name, args)
    },
}

// Misc

pub Item: Item = {
    <l:@L> "{" <entries: CommaOpt<Item>> "}" <r:@R> => {
        Item::Tuple(Span::new(span!(l, r), Tuple(entries)))
    },
    <l:@L> "[" <head: CommaOpt<Item>> <tail: ("|" <Item>)?> "]" <r:@R> => {
        Item::List(Span::new(span!(l, r), List { head, tail }))
    },

    <l:@L> <v: atom> <r:@R> => {
        Item::Lit(Literal::Atom(Ident::new(v, span!(l, r))))
    },
    <l:@L> <v: integer> <r:@R> => {
        Item::Lit(Literal::Int(span!(l, r), v.0))
    },
    <l:@L> <v: float> <r:@R> => {
        Item::Lit(Literal::Float(span!(l, r), v.0))
    },
    <l:@L> <v: string> <r:@R> => {
        Item::Lit(Literal::String(Ident::new(v, span!(l, r))))
    },
};

Attribute: Attribute = {
   <l:@L> "{" "attribute" "," "{" <annos: Comma<Annotation>> "}" "," <name:ident> "," <value:Item> "}" <r:@R> => {
       Attribute::new(span!(l, r), name, annos, value)
   }
};

Function: Function = {
    <l:@L> "{" "function" "," "{" <annos: Comma<Annotation>> "}" "," <name:ident> "," <arity:arity> "," <clauses: Comma<Clause>> "}" <r:@R> => {
        Function::new(span!(l, r), name, arity, annos, clauses)
    }
};

Literal: Expr = {
    "{" "integer" "," <_:linenum> "," <i:Integer> "}"
        => Expr::Literal(i),
    <l:@L> <f:float> <r:@R>
        => Expr::Literal(Literal::Float(span!(l, r), f)),
    <atom>
        => Expr::Literal(Literal::Atom(<>)),
    <s:string>
        => Expr::Literal(Literal::String(s)),
};

#[inline]
Integer: Literal = {
    <l:@L> <i:integer> <r:@R>
        => Literal::Integer(span!(l, r), i),
};

#[inline]
linenum: Loc = {
  "{" <line:line> "," <col:column> "}" => { Loc::new(line, col) }
}

#[inline]
line: u32 = <i:integer> = i.try_into().unwrap();

#[inline]
column: u32 = <i:integer> = i.try_into().unwrap();

#[inline]
arity: u8 = <i:integer> => i.try_into().unwrap();

#[inline]
ident: Ident = <l:@L> <a:atom> <r:@R>
    => Ident::new(a.0, span!(l, r));


extern {
    type Location = SourceIndex;
    type Error = ();

    enum Token {
        atom => Token::AtomLiteral(<Symbol>),
        var => Token::Variable(<Symbol>),
        integer => Token::IntLiteral(<Integer>),
        string => Token::StringLiteral(<Symbol>),
        float => Token::FloatLiteral(<Float>),
        "atom" => Token::Atom,
        "attribute" => Token::Attribute,
        "bin" => Token::Bin,
        "bin_element" => Token::BinElement,
        "bc" => Token::BitComprehension,
        "b_generate" => Token::BitGenerator,
        "call" => Token::Call,
        "callback" => Token::Callback,
        "case" => Token::Case,
        "catch" => Token::Catch,
        "char" => Token::Char,
        "clauses" => Token::Clauses,
        "clause" => Token::Clause,
        "cons" => Token::Cons,
        "error" => Token::Error,
        "export" => Token::Export,
        "export_type" => Token::ExportType,
        "file" => Token::File,
        "function" => Token::Function,
        "fun" => Token::Fun,
        "if" => Token::If,
        "import" => Token::Import,
        "integer" => Token::Integer,
        "generate" => Token::ListGenerator,
        "lc" => Token::ListComprehension,
        "match" => Token::Match,
        "map" => Token::Map,
        "map_field_assoc" => Token::MapFieldAssoc,
        "map_field_exact" => Token::MapFieldExact,
        "module" => Token::Module,
        "nil" => Token::Nil,
        "op" => Token::Op,
        "opaque" => Token::Opaque,
        "optional_callbacks" => Token::OptionalCallbacks,
        "receive" => Token::Receive,
        "record" => Token::Record,
        "record_field" => Token::RecordField,
        "spec" => Token::Spec,
        "string" => Token::String,
        "try" => Token::Try,
        "tuple" => Token::Tuple,
        "type" => Token::Type,
        "user_type" => Token::UserType,
        "var" => Token::Var,
        "warning" => Token::Warning,
        "," => Token::Comma,
        "." => Token::Dot,
        "|" => Token::Pipe,
        "[" => Token::SquareOpen,
        "]" => Token::SquareClose,
        "{" => Token::CurlyOpen,
        "}" => Token::CurlyClose,
    }
}
