#!/usr/bin/env bash

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd -P)"
CRATE_WORKSPACE_DIR="$(cd "${SCRIPT_DIR}/.." && pwd -P)"
LIBLUMEN_MLIR_INCLUDE_DIR="${CRATE_WORKSPACE_DIR}/compiler/mlir/c_src/include"

tablegen=
tablegen_input="$1"
tablegen_output="$2"
tablegen_json="$(mktemp --tmpdir 'tablegenXXX')"
script=

if [ ! -f "$tablegen_input" ]; then
    echo "Expected path to TableGen input file to be provided as the first argument"
    exit 2
fi

if [ -z "$tablegen_output" ]; then
    echo "Expected path to write TableGen output to as second argument"
    exit 2
fi

if ! command -v jq >/dev/null; then
    echo "Must have jq installed and in your PATH"
    exit 2
fi

if [ -n "$LLVM_PREFIX" ]; then
    tablegen="${LLVM_PREFIX}/bin/llvm-tblgen"
else
    if ! tablegen="$(command -v llvm-tblgen)"; then
        echo "Must set LLVM_PREFIX or have llvm-tblgen in your PATH"
        exit 2
    fi
fi

# Ensure we can write to the output file
mkdir -p "$(dirname "$tablegen_output")"

# Run llvm-tablegen on the given input file, with all includes covering all builtin and Lumen dialects
# The result is a JSON file written to $tablegen_json
if ! "$tablegen" -I"${LLVM_PREFIX}/include" -I"${LIBLUMEN_MLIR_INCLUDE_DIR}" --dump-json -o "$tablegen_json" "${tablegen_input}"; then
   echo "Error occurred while dumping json representation of ${tablegen_input}"
   exit 1
fi

# Define the jq script which will process the raw TableGen json and output just the items we care about
read -r -d '' script <<'EOF'
. as $root | (."!instanceof".Dialect | map($root[.]) | .[0]) + {
  attributes: (."!instanceof".AttrDef | map($root[.])),
  types: (."!instanceof".TypeDef | map($root[.])),
  operations: (."!instanceof".Op | map($root[.]) | map(.successors.args |= (. | map({name: .[1]} + $root[.[0].def]))) | map(.traits |= (. | map(. + $root[.def])) )),
  enums: (."!instanceof".IntEnumAttr | map($root[.]) | map(.enumerants |= (. | map(. + $root[.def])))),
  bitflags: (."!instanceof".BitEnumAttr | map($root[.]) | map(.enumerants |= (. | map(. + $root[.def])))),
}
EOF

# Run our script and write it to the selected output file
if ! jq -r "$script" < "$tablegen_json" > "$tablegen_output"; then
    echo "Failed to process ${tablegen_json}"
    # Clean up the output file if an error occurs
    [ -f "$tablegen_output" ] && rm -f "$tablegen_output"
    exit 1
fi

exit 0
