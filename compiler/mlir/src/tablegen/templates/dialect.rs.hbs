use liblumen_compiler_macros::operation;

use crate::*;

/// {{summary}}
///
/// Wraps mlir::OpBuilder and provides functionality for constructing dialect operations, types, and attributes
pub struct {{builder_name}}<'a> {
    builder: &'a mut OpBuilder,
}
impl<'a> {{builder_name}}<'a> {
    pub fn new(builder: &mut OpBuilder) -> Self {
        Self { builder }
    }
}
impl<'a> std::ops::Deref for {{builder_name}}<'a> {
    type Target = OpBuilder;
    fn deref(&self) -> &Self::Target {
        &self.builder
    }
}
impl<'a> std::ops::DerefMut for {{builder_name}}<'a> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.builder
    }
}


{{#with this as |dialect|}}
  {{#each enums as |e|}}
    {{~> enum e dialect=dialect name=e.class_name enum_value_type=to_enum_value_type(e)}}
  {{/each}}
{{/with}}

{{#with this as |dialect|}}
  {{#each bitflags as |bf|}}
    {{~> bitflag bf dialect=dialect name=bf.class_name enum_value_type=to_enum_value_type(bf)}}
  {{/each}}
{{/with}}

{{#with this as |dialect|}}
  {{#each types as |ty|}}
    {{~> type ty dialect=dialect}}
  {{/each}}
{{/with}}

{{#with this as |dialect|}}
  {{#each operations as |op|}}
    {{~> operation op dialect=dialect}}
  {{/each}}
{{/with}}
