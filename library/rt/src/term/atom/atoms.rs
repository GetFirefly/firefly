#![allow(nonstandard_style, non_upper_case_globals)]
///! AUTOGENERATED by build.rs - do not modify this file
use super::{Atom, AtomData};

pub const Empty_VALUE: &'static [u8] = b"";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_"]
#[linkage = "linkonce_odr"]
pub static Empty_ATOM: AtomData = AtomData {
    size: Empty_VALUE.len(),
    ptr: Empty_VALUE.as_ptr(),
};


pub const Author_VALUE: &'static [u8] = b"author";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_author"]
#[linkage = "linkonce_odr"]
pub static Author_ATOM: AtomData = AtomData {
    size: Author_VALUE.len(),
    ptr: Author_VALUE.as_ptr(),
};


pub const Behaviour_VALUE: &'static [u8] = b"behaviour";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_behaviour"]
#[linkage = "linkonce_odr"]
pub static Behaviour_ATOM: AtomData = AtomData {
    size: Behaviour_VALUE.len(),
    ptr: Behaviour_VALUE.as_ptr(),
};


pub const Callback_VALUE: &'static [u8] = b"callback";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_callback"]
#[linkage = "linkonce_odr"]
pub static Callback_ATOM: AtomData = AtomData {
    size: Callback_VALUE.len(),
    ptr: Callback_VALUE.as_ptr(),
};


pub const Compile_VALUE: &'static [u8] = b"compile";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_compile"]
#[linkage = "linkonce_odr"]
pub static Compile_ATOM: AtomData = AtomData {
    size: Compile_VALUE.len(),
    ptr: Compile_VALUE.as_ptr(),
};


pub const Deprecated_VALUE: &'static [u8] = b"deprecated";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_deprecated"]
#[linkage = "linkonce_odr"]
pub static Deprecated_ATOM: AtomData = AtomData {
    size: Deprecated_VALUE.len(),
    ptr: Deprecated_VALUE.as_ptr(),
};


pub const Export_VALUE: &'static [u8] = b"export";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_export"]
#[linkage = "linkonce_odr"]
pub static Export_ATOM: AtomData = AtomData {
    size: Export_VALUE.len(),
    ptr: Export_VALUE.as_ptr(),
};


pub const File_VALUE: &'static [u8] = b"file";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_file"]
#[linkage = "linkonce_odr"]
pub static File_ATOM: AtomData = AtomData {
    size: File_VALUE.len(),
    ptr: File_VALUE.as_ptr(),
};


pub const Import_VALUE: &'static [u8] = b"import";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_import"]
#[linkage = "linkonce_odr"]
pub static Import_ATOM: AtomData = AtomData {
    size: Import_VALUE.len(),
    ptr: Import_VALUE.as_ptr(),
};


pub const Line_VALUE: &'static [u8] = b"line";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_line"]
#[linkage = "linkonce_odr"]
pub static Line_ATOM: AtomData = AtomData {
    size: Line_VALUE.len(),
    ptr: Line_VALUE.as_ptr(),
};


pub const Module_VALUE: &'static [u8] = b"module";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_module"]
#[linkage = "linkonce_odr"]
pub static Module_ATOM: AtomData = AtomData {
    size: Module_VALUE.len(),
    ptr: Module_VALUE.as_ptr(),
};


pub const Nifs_VALUE: &'static [u8] = b"nifs";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_nifs"]
#[linkage = "linkonce_odr"]
pub static Nifs_ATOM: AtomData = AtomData {
    size: Nifs_VALUE.len(),
    ptr: Nifs_VALUE.as_ptr(),
};


pub const OnLoad_VALUE: &'static [u8] = b"on_load";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_on_load"]
#[linkage = "linkonce_odr"]
pub static OnLoad_ATOM: AtomData = AtomData {
    size: OnLoad_VALUE.len(),
    ptr: OnLoad_VALUE.as_ptr(),
};


pub const Opaque_VALUE: &'static [u8] = b"opaque";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_opaque"]
#[linkage = "linkonce_odr"]
pub static Opaque_ATOM: AtomData = AtomData {
    size: Opaque_VALUE.len(),
    ptr: Opaque_VALUE.as_ptr(),
};


pub const Spec_VALUE: &'static [u8] = b"spec";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_spec"]
#[linkage = "linkonce_odr"]
pub static Spec_ATOM: AtomData = AtomData {
    size: Spec_VALUE.len(),
    ptr: Spec_VALUE.as_ptr(),
};


pub const Type_VALUE: &'static [u8] = b"type";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_type"]
#[linkage = "linkonce_odr"]
pub static Type_ATOM: AtomData = AtomData {
    size: Type_VALUE.len(),
    ptr: Type_VALUE.as_ptr(),
};


pub const Vsn_VALUE: &'static [u8] = b"vsn";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_vsn"]
#[linkage = "linkonce_odr"]
pub static Vsn_ATOM: AtomData = AtomData {
    size: Vsn_VALUE.len(),
    ptr: Vsn_VALUE.as_ptr(),
};


pub const Badarg_VALUE: &'static [u8] = b"badarg";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_badarg"]
#[linkage = "linkonce_odr"]
pub static Badarg_ATOM: AtomData = AtomData {
    size: Badarg_VALUE.len(),
    ptr: Badarg_VALUE.as_ptr(),
};


pub const Badrecord_VALUE: &'static [u8] = b"badrecord";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_badrecord"]
#[linkage = "linkonce_odr"]
pub static Badrecord_ATOM: AtomData = AtomData {
    size: Badrecord_VALUE.len(),
    ptr: Badrecord_VALUE.as_ptr(),
};


pub const Badmap_VALUE: &'static [u8] = b"badmap";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_badmap"]
#[linkage = "linkonce_odr"]
pub static Badmap_ATOM: AtomData = AtomData {
    size: Badmap_VALUE.len(),
    ptr: Badmap_VALUE.as_ptr(),
};


pub const Badmatch_VALUE: &'static [u8] = b"badmatch";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_badmatch"]
#[linkage = "linkonce_odr"]
pub static Badmatch_ATOM: AtomData = AtomData {
    size: Badmatch_VALUE.len(),
    ptr: Badmatch_VALUE.as_ptr(),
};


pub const BadFilter_VALUE: &'static [u8] = b"bad_filter";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_bad_filter"]
#[linkage = "linkonce_odr"]
pub static BadFilter_ATOM: AtomData = AtomData {
    size: BadFilter_VALUE.len(),
    ptr: BadFilter_VALUE.as_ptr(),
};


pub const BadGenerator_VALUE: &'static [u8] = b"bad_generator";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_bad_generator"]
#[linkage = "linkonce_odr"]
pub static BadGenerator_ATOM: AtomData = AtomData {
    size: BadGenerator_VALUE.len(),
    ptr: BadGenerator_VALUE.as_ptr(),
};


pub const BadValue_VALUE: &'static [u8] = b"bad_value";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_bad_value"]
#[linkage = "linkonce_odr"]
pub static BadValue_ATOM: AtomData = AtomData {
    size: BadValue_VALUE.len(),
    ptr: BadValue_VALUE.as_ptr(),
};


pub const BadSize_VALUE: &'static [u8] = b"bad_size";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_bad_size"]
#[linkage = "linkonce_odr"]
pub static BadSize_ATOM: AtomData = AtomData {
    size: BadSize_VALUE.len(),
    ptr: BadSize_VALUE.as_ptr(),
};


pub const CaseClause_VALUE: &'static [u8] = b"case_clause";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_case_clause"]
#[linkage = "linkonce_odr"]
pub static CaseClause_ATOM: AtomData = AtomData {
    size: CaseClause_VALUE.len(),
    ptr: CaseClause_VALUE.as_ptr(),
};


pub const Error_VALUE: &'static [u8] = b"error";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_error"]
#[linkage = "linkonce_odr"]
pub static Error_ATOM: AtomData = AtomData {
    size: Error_VALUE.len(),
    ptr: Error_VALUE.as_ptr(),
};


pub const Exit_VALUE: &'static [u8] = b"exit";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_exit"]
#[linkage = "linkonce_odr"]
pub static Exit_ATOM: AtomData = AtomData {
    size: Exit_VALUE.len(),
    ptr: Exit_VALUE.as_ptr(),
};


pub const FunctionClause_VALUE: &'static [u8] = b"function_clause";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_function_clause"]
#[linkage = "linkonce_odr"]
pub static FunctionClause_ATOM: AtomData = AtomData {
    size: FunctionClause_VALUE.len(),
    ptr: FunctionClause_VALUE.as_ptr(),
};


pub const IfClause_VALUE: &'static [u8] = b"if_clause";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_if_clause"]
#[linkage = "linkonce_odr"]
pub static IfClause_ATOM: AtomData = AtomData {
    size: IfClause_VALUE.len(),
    ptr: IfClause_VALUE.as_ptr(),
};


pub const NifError_VALUE: &'static [u8] = b"nif_error";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_nif_error"]
#[linkage = "linkonce_odr"]
pub static NifError_ATOM: AtomData = AtomData {
    size: NifError_VALUE.len(),
    ptr: NifError_VALUE.as_ptr(),
};


pub const Throw_VALUE: &'static [u8] = b"throw";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_throw"]
#[linkage = "linkonce_odr"]
pub static Throw_ATOM: AtomData = AtomData {
    size: Throw_VALUE.len(),
    ptr: Throw_VALUE.as_ptr(),
};


pub const TryClause_VALUE: &'static [u8] = b"try_clause";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_try_clause"]
#[linkage = "linkonce_odr"]
pub static TryClause_ATOM: AtomData = AtomData {
    size: TryClause_VALUE.len(),
    ptr: TryClause_VALUE.as_ptr(),
};


pub const Erlang_VALUE: &'static [u8] = b"erlang";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_erlang"]
#[linkage = "linkonce_odr"]
pub static Erlang_ATOM: AtomData = AtomData {
    size: Erlang_VALUE.len(),
    ptr: Erlang_VALUE.as_ptr(),
};


pub const Ok_VALUE: &'static [u8] = b"ok";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_ok"]
#[linkage = "linkonce_odr"]
pub static Ok_ATOM: AtomData = AtomData {
    size: Ok_VALUE.len(),
    ptr: Ok_VALUE.as_ptr(),
};


pub const Undef_VALUE: &'static [u8] = b"undef";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_undef"]
#[linkage = "linkonce_odr"]
pub static Undef_ATOM: AtomData = AtomData {
    size: Undef_VALUE.len(),
    ptr: Undef_VALUE.as_ptr(),
};


pub const Utf8_VALUE: &'static [u8] = b"utf8";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_utf8"]
#[linkage = "linkonce_odr"]
pub static Utf8_ATOM: AtomData = AtomData {
    size: Utf8_VALUE.len(),
    ptr: Utf8_VALUE.as_ptr(),
};


pub const Normal_VALUE: &'static [u8] = b"normal";

#[cfg_attr(target_os = "macos", link_section = "__DATA,atoms")]
#[cfg_attr(all(linux, not(target_os = "macos")), link_section = "__atoms")]
#[export_name = "atom_normal"]
#[linkage = "linkonce_odr"]
pub static Normal_ATOM: AtomData = AtomData {
    size: Normal_VALUE.len(),
    ptr: Normal_VALUE.as_ptr(),
};




pub const False: Atom = Atom(core::ptr::null());

pub const True: Atom = Atom(1usize as *const AtomData);

pub static Empty: Atom = Atom(&Empty_ATOM as *const AtomData);

pub static Author: Atom = Atom(&Author_ATOM as *const AtomData);

pub static Behaviour: Atom = Atom(&Behaviour_ATOM as *const AtomData);

pub static Callback: Atom = Atom(&Callback_ATOM as *const AtomData);

pub static Compile: Atom = Atom(&Compile_ATOM as *const AtomData);

pub static Deprecated: Atom = Atom(&Deprecated_ATOM as *const AtomData);

pub static Export: Atom = Atom(&Export_ATOM as *const AtomData);

pub static File: Atom = Atom(&File_ATOM as *const AtomData);

pub static Import: Atom = Atom(&Import_ATOM as *const AtomData);

pub static Line: Atom = Atom(&Line_ATOM as *const AtomData);

pub static Module: Atom = Atom(&Module_ATOM as *const AtomData);

pub static Nifs: Atom = Atom(&Nifs_ATOM as *const AtomData);

pub static OnLoad: Atom = Atom(&OnLoad_ATOM as *const AtomData);

pub static Opaque: Atom = Atom(&Opaque_ATOM as *const AtomData);

pub static Spec: Atom = Atom(&Spec_ATOM as *const AtomData);

pub static Type: Atom = Atom(&Type_ATOM as *const AtomData);

pub static Vsn: Atom = Atom(&Vsn_ATOM as *const AtomData);

pub static Badarg: Atom = Atom(&Badarg_ATOM as *const AtomData);

pub static Badrecord: Atom = Atom(&Badrecord_ATOM as *const AtomData);

pub static Badmap: Atom = Atom(&Badmap_ATOM as *const AtomData);

pub static Badmatch: Atom = Atom(&Badmatch_ATOM as *const AtomData);

pub static BadFilter: Atom = Atom(&BadFilter_ATOM as *const AtomData);

pub static BadGenerator: Atom = Atom(&BadGenerator_ATOM as *const AtomData);

pub static BadValue: Atom = Atom(&BadValue_ATOM as *const AtomData);

pub static BadSize: Atom = Atom(&BadSize_ATOM as *const AtomData);

pub static CaseClause: Atom = Atom(&CaseClause_ATOM as *const AtomData);

pub static Error: Atom = Atom(&Error_ATOM as *const AtomData);

pub static Exit: Atom = Atom(&Exit_ATOM as *const AtomData);

pub static FunctionClause: Atom = Atom(&FunctionClause_ATOM as *const AtomData);

pub static IfClause: Atom = Atom(&IfClause_ATOM as *const AtomData);

pub static NifError: Atom = Atom(&NifError_ATOM as *const AtomData);

pub static Throw: Atom = Atom(&Throw_ATOM as *const AtomData);

pub static TryClause: Atom = Atom(&TryClause_ATOM as *const AtomData);

pub static Erlang: Atom = Atom(&Erlang_ATOM as *const AtomData);

pub static Ok: Atom = Atom(&Ok_ATOM as *const AtomData);

pub static Undef: Atom = Atom(&Undef_ATOM as *const AtomData);

pub static Utf8: Atom = Atom(&Utf8_ATOM as *const AtomData);

pub static Normal: Atom = Atom(&Normal_ATOM as *const AtomData);
