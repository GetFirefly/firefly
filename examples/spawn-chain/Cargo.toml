[package]
name = "spawn-chain"
version = "0.1.0"
authors = ["Luke Imhoff <Kronic.Deth@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook", "time_web_sys"]
time_web_sys = ["parking_lot_core/time_web_sys", "lumen_rt_full/time_web_sys"]

[dependencies]
anyhow = "1.0.11"
# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.1", optional = true }

js-sys = "0.3.25"
liblumen_alloc = { path = "../../liblumen_alloc" }
liblumen_otp = { path = "../../native_implemented_functions/otp" }
lumen_rt_full = { path = "../../runtimes/full" }
liblumen_web = { path = "../../native_implemented_functions/web" }
num-bigint = "0.2"
wasm-bindgen = "0.2"

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.2", optional = true }

[dependencies.parking_lot_core]
git = "https://github.com/KronicDeth/parking_lot.git"
branch = "wasm32-time_web_sys"
features = ["nightly"]

[target.'cfg(target_arch = "wasm32")'.dependencies.web-sys]
version = "0.3.20"
features = ['console']

[dev-dependencies]
time-test = "0.2.1"
futures = "0.1.28"
wasm-bindgen-futures = "0.3.26"
wasm-bindgen-test = "0.2"
