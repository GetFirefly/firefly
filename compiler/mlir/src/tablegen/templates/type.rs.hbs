#[repr(transparent)]
#[derive(Copy, Clone)]
pub struct {{name}}(::liblumen_mlir::ir::Type);
impl {{name}} {
    pub fn get(
        context: ::liblumen_mlir::ir::MlirContext,
        {{#if is_generic}}
          {{#if is_variadic}}
            inner: &[Type],
          {{else}}
            inner: Type,
          {{/if}}
        {{/if}}
    ) -> Self {
        {{#if is_generic}}
          {{#if is_variadic}}
            unsafe { mlir_{{to_snake_case(dialect.name)}}_get_{{to_snake_case(name)}}(context, inner.as_ptr(), inner.len()) }
          {{else}}
            unsafe { mlir_{{to_snake_case(dialect.name)}}_get_{{to_snake_case(name)}}(context, inner) }
          {{/if}}
        {{else}}
          unsafe { mlir_{{to_snake_case(dialect.name)}}_get_{{to_snake_case(name)}}(context) }
        {{/if}}
    }
}
impl ::std::ops::Deref for {{name}} {
    type Target = ::liblumen_mlir::ir::Type;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl ::std::convert::TryFrom<::liblumen_mlir::ir::Type> for {{name}} {
    type Error = ();
    #[inline]
    pub fn try_from(ty: ::liblumen_mlir::ir::Type) -> Result<Self, Self::Error> {
        if unsafe { mlir_{{to_snake_case(dialect.name)}}_isa_{{to_snake_case(name)}}(ty) } {
            Ok(Self(ty))
        } else {
            Err(())
        }
    }
}
impl Into<::liblumen_mlir::ir::Type> for {{name}} {
    #[inline(always)]
    fn into(self) -> ::liblumen_mlir::ir::Type {
       self.0
    }
}
impl ::std::fmt::Debug for {{name}} {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{{name}}({:?})", &self.0)
    }
}
impl ::std::fmt::Display for {{name}} {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}", &self.0)
    }
}

impl<'a> {{dialect.builder_name}} {
    #[inline]
    pub fn get_{{to_snake_case(name)}}(&self
        {{#if is_generic}}
          {{#if is_variadic}}
            , elements: &[::liblumen_mlir::ir::Type],
          {{else}}
            , elements: ::liblumen_mlir::ir::Type,
          {{/if}}
        {{/if}}
    ) -> {{name}} {
        {{#if is_generic}}
          {{name}}::get(self.context, elements)
        {{else}}
          {{name}}::get(self.context)
        {{/if}}
    }
}

extern "C" {
    #[link_name = "mlir{{name}}Get"]
    {{#if is_generic}}
      {{#if is_variadic}}
        fn mlir_{{to_snake_case(dialect.name)}}_get_{{to_snake_case(name)}}(context: ::liblumen_mlir::ir::MlirContext, ptr: *const ::liblumen_mlir::ir::Type, len: usize) -> {{name}};
      {{else}}
        fn mlir_{{to_snake_case(dialect.name)}}_get_{{to_snake_case(name)}}(context: ::liblumen_mlir::ir::MlirContext, inner: ::liblumen_mlir::ir::Type) -> {{name}};
      {{/if}}
    {{else}}
      fn mlir_{{to_snake_case(dialect.name)}}_get_{{to_snake_case(name)}}(context: ::liblumen_mlir::ir::MlirContext) -> {{name}};
    {{/if}}
    #[link_name = "mlir{{name}}Isa"]
    fn mlir_{{to_snake_case(dialect.name)}}_isa_{{to_snake_case(name)}}(ty: ::liblumen_mlir::ir::Type) -> {{name}};
}
