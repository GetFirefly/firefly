# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc eb86ce1fea78fb017fb34b14fcac444aec5cef3869eb9cddae36cdf11674aaea # shrinks to (0, Pid(4671), Box(0x111543488, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::integer::big::BigInteger>(BigInteger { header: Header<liblumen_alloc::erts::term::integer::big::BigInteger>(0b100000000000000000000000000000000000000000000000100), value: -70368744177667 (101111111111111111111111111111111111111111111101) } at 0x111543488))))
cc f18157038ab5d0953bf7afb0cd32fd4d9a9f62ecd28eeda8e920a6e30d3d5754 # shrinks to (0, Pid(3403), Box(0x14b1d7410, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::integer::big::BigInteger>(BigInteger { header: Header<liblumen_alloc::erts::term::integer::big::BigInteger>(0b100000000000000000000000000000000000000000000000100), value: -70368744177667 (101111111111111111111111111111111111111111111101) } at 0x14b1d7410))))
cc b88e42d626d9ee442f02f3e1f6271ed646a9e4b2b7ccdab5554a6f9e33a9c9df # shrinks to (0, Pid(14869), Box(0x10e6cdef8, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::integer::big::BigInteger>(BigInteger { header: Header<liblumen_alloc::erts::term::integer::big::BigInteger>(0b100000000000000000000000000000000000000000000000100), value: -70368744177667 (101111111111111111111111111111111111111111111101) } at 0x10e6cdef8))))
cc 47168f26a566d84c155cb021586518132a1bddfbecf0f1df24daffeaef92c9dc # shrinks to (0, Pid(4450), Box(0x11870cfc0, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::integer::big::BigInteger>(BigInteger { header: Header<liblumen_alloc::erts::term::integer::big::BigInteger>(0b100000000000000000000000000000000000000000000000100), value: -70368744177667 (101111111111111111111111111111111111111111111101) } at 0x11870cfc0))))
cc ce39a9e2973fd27f9426b4576f54acd5573a9ff04d604139fc92bf8404920207 # shrinks to (0, Pid(5165), Box(0x11cbb5698, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::integer::big::BigInteger>(BigInteger { header: Header<liblumen_alloc::erts::term::integer::big::BigInteger>(0b100000000000000000000000000000000000000000000000100), value: -70368744177667 (101111111111111111111111111111111111111111111101) } at 0x11cbb5698))))
cc 9354231408fa397d23dc54e4fc818ff348ccca5ba8ab452c3c4909eb873d9a1b # shrinks to (1, Pid(4733), Box(0x11dbe70a8, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::binary::sub::SubBinary>(SubBinary { header: Header<liblumen_alloc::erts::term::binary::sub::SubBinary>(0b110110000000000000000000000000000000000000000000101), byte_offset: 0, bit_offset: 0, full_byte_len: 0, partial_byte_bit_len: 1, writable: false, is_binary: false, is_aligned: true, original: Box(0x11dbe7090, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::binary::heap::HeapBin>(HeapBin { header: Header<liblumen_alloc::erts::term::binary::heap::HeapBin>(0b110101000000000000000000000000000000000000000000010), flags: BinaryFlags { raw: 1001, encoding: raw, size: 1, is_literal: false }, data: [0] } at 0x11dbe7090))) } at 0x11dbe70a8))))
